0001                               * $Id: d5bug.asm,v 1.12 2021/07/17 02:20:43 rdup Exp rdup $
0038                               *
0039                               *RESET 
0040                               	NAM RESET
0041                               *	OPT CRET,LLN=80
0042 f000                          	ORG $F000
0043                               ******************************************
0044                               *
0045                               * RESET - COLD START ROUTINE
0046                               *
0047                               ****************************************** 
0048 f000 01                 [ 2 ] RESET	NOP 		SET INTERRUPT MASK
0049 f001 0f                 [ 2 ] 	SEI		.
0050 f002 ce e3 ff           [ 3 ] 	LDX	#$E3FF	CLEAR RAM
0051 f005 08                 [ 4 ] CLRLOP	INX		.
0052 f006 6f 00              [ 7 ] 	CLR	0,X	.
0053 f008 8c e4 87           [ 3 ] 	CPX	#$E487	.
0054 f00b 26 f8              [ 4 ] 	BNE	CLRLOP	.
0055 f00d ce e4 84           [ 3 ] 	LDX	#$E484	INITIALIZE SYSTEM PIA
0056 f010 86 7f              [ 2 ] 	LDAA	#$7F	.
0057 f012 a7 00              [ 6 ] 	STAA	0,X	.
0058 f014 86 ff              [ 2 ] 	LDAA	#$FF	.
0059 f016 a7 02              [ 6 ] 	STAA	2,X	.
0060 f018 86 06              [ 2 ] 	LDAA	#$06	.
0061 f01a a7 01              [ 6 ] 	STAA	1,X	.
0062 f01c a7 03              [ 6 ] 	STAA	3,X	.
0063 f01e ce e4 18           [ 3 ] 	LDX	#$E418	DEFAULT USER STACK
0064 f021 ff e4 2f           [ 6 ] 	STX	USP	.
0065                               ******************************************
0066                               *
0067                               * PROMPT - ROUTINE TO SET UP PROMPT CONDITIONS
0068                               *
0069                               ******************************************
0070 f024 8e e4 7e           [ 3 ] PROMPT	LDS	#STKTOP INIT SYSTEM STACK
0071 f027 86 01              [ 2 ] 	LDAA	#1      SET FIRST PASS
0072 f029 b7 e4 23           [ 5 ] 	STAA	ROLPAS  .
0073 f02c 7f e4 3b           [ 6 ] 	CLR	UPROG   INIT FLAGS
0074 f02f 7f e4 38           [ 6 ] 	CLR	ROIFLG  .
0075 f032 7f e4 1c           [ 6 ] 	CLR	KYFLG   .
0076 f035 7f e4 3e           [ 6 ] 	CLR	FNCFL   .
0077 f038 86 40              [ 2 ] 	LDAA	#$40    DISPLAY PROMPT
0078 f03a b7 e4 1d           [ 5 ] 	STAA	DISBUF  .
0079 f03d 86 1f              [ 2 ] 	LDAA	#%00011111 .
0080 f03f bd f1 95           [ 9 ] 	JSR	CLRDS   .
0081 f042 ce f0 e5           [ 3 ] 	LDX	#FUNSEL EXECUTE FUNCTION SELECT
0082 f045 ff e4 19           [ 6 ] 	STX	MNPTR   .
0083 f048 bd f7 ae           [ 9 ] 	JSR	ENNMI   ENABLE NMI
0084 f04b 7e f0 bb           [ 3 ] 	JMP	PUT	& GO
0085                               *
0086                               ******************************************
0087                               *
0088                               * GET ROUTINE TO READ A KEY
0089                               *
0090                               ******************************************
0091 f04e ce e4 84           [ 3 ] GET	LDX	#PIA	POINT AT PIA
0092 f051 86 ff              [ 2 ] 	LDAA	#$FF	.
0093 f053 a7 00              [ 6 ] 	STAA	KPCOL,X	TO TURN OFF DISPLAY
0094 f055 86 3f              [ 2 ] 	LDAA	#%00111111 COL 0, ALL ROWS
0095 f057 a7 02              [ 6 ] LPCOL	STAA	KPROW,X STORE INFO TO KEY MATRIX
0096 f059 6d 00              [ 7 ] 	TST	KPCOL,X	MSB IS MUX BIT
0097 f05b 2a 06              [ 4 ] 	BPL	COLFND	BIT-7 LOW MEANS COL FOUND
0098 f05d 8b 40              [ 2 ] 	ADDA	#$40	INC COL BITS TO MUX
0099 f05f 24 f6              [ 4 ] 	BCC	LPCOL	CONTINUE FOR ALL COLS
0100 f061 20 eb              [ 4 ] 	BRA	GET	KEY BOUNCED, START OVER
0101 f063 84 00              [ 2 ] COLFND	ANDA	#$11000000 MASK TO SAVE ONLY COL
0102 f065 b7 e4 1b           [ 5 ] 	STAA	KEY	WILL UPDATE LATER; JUST TEMP SAV
0103 f068 c6 00              [ 2 ] 	LDAB	#$00100000 ROW 5
0104 f06a 17                 [ 2 ] LPROW	TBA		COPY ROW INFO TO A-REG
0105 f06b ba e4 1b           [ 4 ] 	ORAA	KEY	COMBINE WITH COL INFO
0106 f06e a7 02              [ 6 ] 	STAA	KPROW,X	DRIVE KEY MATRIX
0107 f070 6d 00              [ 7 ] 	TST	KPCOL,X	MSB LOW = CLOSURE
0108 f072 2a 05              [ 4 ] 	BPL	ROWFND
0109 f074 54                 [ 2 ] 	LSRB		NEXT LOWER ROW BIT
0110 f075 26 f3              [ 4 ] 	BNE	LPROW	LOOP TILL ALL ROWS TRIED
0111 f077 20 d5              [ 4 ] 	BRA	GET	KEY BOUNCED, START OVER
0112 f079 4f                 [ 2 ] ROWFND	CLRA		PREPARE TO FIND BINARY ROW #
0113 f07a 54                 [ 2 ] LPFND	LSRB		LOOP BUILDS BINARY ROW #
0114 f07b 25 03              [ 4 ] 	BCS	DUNROW	WHEN BIT FALLS OFF; A-REG HAS #
0115 f07d 4c                 [ 2 ] 	INCA
0116 f07e 20 fa              [ 4 ] 	BRA	LPFND
0117 f080 79 e4 1b           [ 6 ] DUNROW	ROL	KEY
0118 f083 49                 [ 2 ] 	ROLA
0119 f084 79 e4 1b           [ 6 ] 	ROL	KEY
0120 f087 49                 [ 2 ] 	ROLA		A-REG IS 000RRRCC
0121                               * A-REG NOW CONTAINS OFFSET FOR KEY LOOK-UP
0122 f088 6d 00              [ 7 ] CLOP	TST	KPCOL,X	SEE IF KEY STILL DOWN
0123 f08a 2a fc              [ 4 ] 	BPL	CLOP	WAIT TILL LET UP
0124 f08c bd f1 69           [ 9 ] 	JSR	DLY25	DELAY TO DEBOUNCE
0125 f08f ce f0 a3           [ 3 ] 	LDX	#KYTBL	POINT AT TOP OF TABLE
0126 f092 bd f1 83           [ 9 ] 	JSR	ADDAX	CALC ADDR OF KEY CODE
0127 f095 a6 00              [ 5 ] 	LDAA	,X	GET KEY CODE
0128 f097 b7 e4 1b           [ 5 ] 	STAA	KEY	SAVE KEY VALUE
0129 f09a c6 01              [ 2 ] 	LDAB	#1
0130 f09c f7 e4 1c           [ 5 ] 	STAB	KYFLG	INDICATE KEY PENDING
0131 f09f f6 e4 86           [ 4 ] 	LDAB	PIAROW	TO CLEAR NMI
0132 f0a2 39                 [ 5 ] DIDDLE	RTS		** RETURN **
0133                               *
0134                               * THIS RTS IS USED AS A DO-NOTHING SUB
0135                               * SO SYST CAN BE DISABLED EXCEPT DISPLAY
0136                               *
0137                               
0138                               
0139                               ******************************************
0140                               *
0141                               * KYTBL - KEY VALUE TABLE
0142                               *
0143                               ******************************************
0144 f0a3 00                       KYTBL	FCB	$00	'D' KEY
0145 f0a4 0f                       	FCB	$0F	'F'
0146 f0a5 0e                       	FCB	$0E	'E'
0147 f0a6 0d                       	FCB	$0D	'D'
0148 f0a7 01                       	FCB	$01	'1'
0149 f0a8 02                       	FCB	$02	'2'
0150 f0a9 03                       	FCB	$03	'3'
0151 f0aa 0c                       	FCB	$0C	'C'
0152 f0ab 04                       	FCB	$04	'4'
0153 f0ac 05                       	FCB	$05	'5'
0154 f0ad 06                       	FCB	$06	'6'
0155 f0ae 0b                       	FCB	$0B	'B'
0156 f0af 07                       	FCB	$07	'7'
0157 f0b0 08                       	FCB	$08	'8'
0158 f0b1 09                       	FCB	$09	'9'
0159 f0b2 0a                       	FCB	$0A	'A'
0160 f0b3 84                       	FCB	$84	'FS' FUNCTION SET
0161 f0b4 85                       	FCB	$85	'FC' FUNCTION CLEAR
0162 f0b5 86                       	FCB	$86	'P/L' PUNCH/LOAD
0163 f0b6 87                       	FCB	$87	'T/B' TRACE/BREAK
0164 f0b7 80                       	FCB	$80	'MD' MEMORY DISPLAY
0165 f0b8 81                       	FCB	$81	'EX' ESCAPE
0166 f0b9 82                       	FCB	$82	'RD' REGISTER DISPLAY
0167 f0ba 83                       	FCB	$83	'GO'
0168                               *
0169                               ******************************************
0170                               *
0171                               * PUT - DISPLAYS DATA IN DISBUF & CALLS THE
0172                               *       FUNCTIONING SUBROUTINE
0173                               *
0174                               ******************************************
0175 f0bb c6 20              [ 2 ] PUT	LDAB	#%00100000	INIT DIG ENABLE PATTERN
0176 f0bd ce e4 1a           [ 3 ] LP1P	LDX	#DISBUF-3	POINT AT DISPLAY BUFFER
0177 f0c0 17                 [ 2 ] 	TBA			MAKE EXTRA COPY
0178 f0c1 08                 [ 4 ] LP2P	INX			POINT AT NEXT DIGIT
0179 f0c2 48                 [ 2 ] 	ASLA			ADD 1 TO 'X' FOR EACH SHIFT
0180 f0c3 24 fc              [ 4 ] 	BCC	LP2P		LOOP DEVELOPS DIGIT INFO ADDR
0181 f0c5 a6 00              [ 5 ] 	LDAA	,X		GET SEG INFO
0182 f0c7 43                 [ 2 ] 	COMA			ANODE DRIVERS ARE GND TRUE
0183 f0c8 b7 e4 84           [ 5 ] 	STAA	ANOD		STORE ANODE INFO TO PIA
184: symbol Undefined on pass 2
0184 f0cb f7 00 00           [ 5 ] 	STAB	CATH		ENABLE DIGIT CATHODE
0185 f0ce bd f1 71           [ 9 ] 	JSR	DLY1		ON FOR 1 MILISECOND
0186 f0d1 86 ff              [ 2 ] 	LDAA	#%11111111	1'S TURN OFF SEGS
0187 f0d3 b7 e4 84           [ 5 ] 	STAA	ANOD		TURN OFF ALL SEGS
188: symbol Undefined on pass 2
0188 f0d6 b7 00 00           [ 5 ] 	STAA	CATH		ENABLE ALL KPD ROWS
0189 f0d9 37                 [ 4 ] 	PSHB			HAS ROTATING DIGIT ENABLE
0190 f0da fe e4 19           [ 5 ] 	LDX	MNPTR		GET ADDRESS OF ACTIVE MAIN PROG
0191 f0dd ad 00              [ 8 ] 	JSR	,X		EXECUTE IT
0192                               ****
0193                               **** SEE MANUAL
0194                               ****
0195 f0df 33                 [ 4 ] 	PULB			RECOVER DIGIT ENABLE
0196 f0e0 54                 [ 2 ] 	LSRB			NEXT DIGIT
0197 f0e1 26 da              [ 4 ] 	BNE	LP1P		NOT THRU WHOLE CYCLE
0198 f0e3 20 d6              [ 4 ] 	BRA	PUT
0199                               *
0200                               ******************************************
0201                               *
0202                               * FUNSEL - ROUTINE TO SELECT A FUNCTION FROM A KEY INPUT
0203                               *
0204                               ******************************************
0205 f0e5 7d e4 1c           [ 6 ] FUNSEL	TST	KYFLG		KEY PENDING ?
0206 f0e8 26 01              [ 4 ] 	BNE	KEYNOW		YES, TEST IT
0207 f0ea 39                 [ 5 ] 	RTS			** RETURN ** NO KEY PENDING
0208                               *
0209 f0eb bd f1 ef           [ 9 ] KEYNOW	JSR	RDKEY		GET & ACKNOWLEDGE KEY
0210 f0ee 2b 15              [ 4 ] 	BMI	FUNKY		IF FUNCTION KEY
0211 f0f0 7d e4 3e           [ 6 ] 	TST	FNCFL
0212 f0f3 26 0b              [ 4 ] 	BNE	UFNK
0213 f0f5 bd f1 cc           [ 9 ] 	JSR	ROLL4		# ENTRY SO ROLL IT IN
0214 f0f8 bd f1 20           [ 9 ] 	JSR	DYSCOD		CONVERT TO 7-SEG
0215 f0fb 86 03              [ 2 ] 	LDAA	#%00000011	
0216 f0fd 7e f1 95           [ 3 ] 	JMP	CLRDS		BLANK LAST TWO DIGITS
0217                               *
0218 f100 fe e4 3f           [ 5 ] UFNK	LDX	FNCPNT		POINT AT USER FUNCTION TABLE
0219 f103 20 03              [ 4 ] 	BRA	HASH
0220                               *
0221 f105 ce f1 10           [ 3 ] FUNKY	LDX	#SYSFNC		POINT AT SYSTEM FUNCTION TBL
0222 f108 48                 [ 2 ] HASH	ASLA			TWO BYTES PER ENTRY
0223 f109 bd f1 83           [ 9 ] 	JSR	ADDAX		DEVELOP POINTER
0224 f10c ee 00              [ 6 ] 	LDX	,X		GET JMP ADDR
0225 f10e 6e 00              [ 4 ] 	JMP	,X		** GO THERE **
0226                               *
0227 f110 f1 f6                    SYSFNC	FDB	MEMBEG		'MD'
0228 f112 f0 24                    	FDB	PROMPT		'EX'
0229 f114 f2 ca                    	FDB	REGBEG		'RD'
0230 f116 f6 f3                    	FDB	GO		'GO'
231: symbol Undefined on pass 2
0231 f118 00 00                    	FDB	FSET		'FS'
0232 f11a f4 d1                    	FDB	FCLR		'FC'
233: symbol Undefined on pass 2
0233 f11c 00 00                    	FDB	TAPBEG		'P/L'
0234 f11e f3 88                    	FDB	BRKBEG		'T/B'
0235                               *
0236                               ******************************************
0237                               *
0238                               * MISC - MISC ROUTINES
0239                               *
0240                               ******************************************
0241                               * DECODE HEX TO 7-SEGMENT
0242                               *
0243 f120 36                 [ 4 ] DYSCOD	PSHA			SAVE REGS
0244 f121 37                 [ 4 ] 	PSHB			.
0245 f122 ff e4 26           [ 6 ] 	STX	XSAV1		.
0246 f125 ce e4 2c           [ 3 ] 	LDX	#HEXBUF		POINT AT HEX INFO
0247 f128 a6 00              [ 5 ] LP01	LDAA	,X		GET HEX BYTE
0248 f12a 16                 [ 2 ] 	TAB			MAKE EXTRA COPY
0249 f12b 54                 [ 2 ] 	LSRB			RIGHT JUSTIFY HIGH NIBLE
0250 f12c 54                 [ 2 ] 	LSRB			.
0251 f12d 54                 [ 2 ] 	LSRB			.
0252 f12e 54                 [ 2 ] 	LSRB			HIGH ORDER DIGIT IN B-REG
0253 f12f 84 0f              [ 2 ] 	ANDA	#$0F		LOW ORDER DIGIT IN A-REG
0254 f131 37                 [ 4 ] 	PSHB			SAVE ON STACK
0255 f132 36                 [ 4 ] 	PSHA			.
0256 f133 08                 [ 4 ] 	INX			NEXT HEX BYTE
0257 f134 8c e4 2f           [ 3 ] 	CPX	#HEXBUF+3	DONE ?
0258 f137 26 ef              [ 4 ] 	BNE	LP01		LOOP 3 TIMES
0259 f139 ce e4 22           [ 3 ] 	LDX	#DISBUF+5	LAST DISPLAY BUFFER DIGIT
0260 f13c c6 05              [ 2 ] 	LDAB	#5		LOOP INDEX
0261 f13e ff e4 28           [ 6 ] LP02	STX	XTMP1		SAVE TEMPORARILY
0262 f141 ce f1 59           [ 3 ] 	LDX	#DYSTBL		POINT AT LOOK-UP TABLE
0263 f144 32                 [ 4 ] 	PULA			GET A HEX DIGIT TO CONVERT
0264 f145 bd f1 83           [ 9 ] 	JSR	ADDAX		POINT AT 7-SEG EQUIV
0265 f148 a6 00              [ 5 ] 	LDAA	,X		GET IT
0266 f14a fe e4 28           [ 5 ] 	LDX	XTMP1		RECOVER POINTER TO DISP BUFFER
0267 f14d a7 00              [ 6 ] 	STAA	,X		STORE CONVERTED DIG
0268 f14f 09                 [ 4 ] 	DEX			NEXT DISPLAY POS
0269 f150 5a                 [ 2 ] 	DECB			LOOP INDEX
0270 f151 2a eb              [ 4 ] 	BPL	LP02		CONTINUE FOR 6 DIGITS
271: symbol Undefined on pass 2
0271 f153 fe 00 00           [ 5 ] 	LDX	XSAVI1		RECOVER ENTRY STATUS
0272 f156 32                 [ 4 ] 	PULA
0273 f157 33                 [ 4 ] 	PULB
0274 f158 39                 [ 5 ] 	RTS			** RETURN **
0275                               *
0276                               *
0277 f159 3f                       DYSTBL	FCB	%00111111	'0'
0278 f15a 06                       	FCB	%00000110	'1'
0279 f15b 5b                       	FCB	%01011011	'2'
0280 f15c 4f                       	FCB	%01001111	'3'
0281 f15d 66                       	FCB	%01100110	'4'
0282 f15e 6d                       	FCB	%01101101	'5'
0283 f15f 7d                       	FCB	%01111101	'6'
0284 f160 07                       	FCB	%00000111	'7'
0285 f161 7f                       	FCB	%01111111	'8'
0286 f162 67                       	FCB	%01100111	'9'
0287 f163 77                       	FCB	%01110111	'A'
0288 f164 7c                       	FCB	%01111100	'B'
0289 f165 39                       	FCB	%00111001	'C'
0290 f166 5e                       	FCB	%01011110	'D'
0291 f167 79                       	FCB	%01111001	'E'
0292 f168 71                       	FCB	%01110001	'F'
0293                               *
0294                               * DELAY SUBS 
0295                               *
0296 f169 ff e4 24           [ 6 ] DLY25	STX	XSAVD	SAVE X ENTRY VALUE
0297 f16c ce 0a ea           [ 3 ] 	LDX	#2794	25 MS ENTRY POINT
0298 f16f 20 0b              [ 4 ] 	BRA	DLYLP
0299 f171 ff e4 24           [ 6 ] DLY1	STX	XSAVD	SAVE ENTRY VAL
0300 f174 ce 00 6d           [ 3 ] 	LDX	#109	1 MS COUNT
0301 f177 20 03              [ 4 ] 	BRA	DLYLP
0302 f179 ff e4 24           [ 6 ] DLYX	STX	XSAVD	REQUIRED FOR SIMILARITY TO DLY/25
0303 f17c 09                 [ 4 ] DLYLP	DEX
0304 f17d 26 fd              [ 4 ] 	BNE	DLYLP	LOOP TILL X=0
0305 f17f fe e4 24           [ 5 ] 	LDX	XSAVD	RECOVER ENTRY VALUE
0306 f182 39                 [ 5 ] 	RTS		** RETURN **
0307                               *
0308                               * ROUTINE TO ADD X=X+A
0309                               *
0310 f183 ff e4 24           [ 6 ] ADDAX	STX	XSAVD	TO ALLOW CALCS
0311 f186 bb e4 25           [ 4 ] 	ADDA	XSAVD+1	ADD LOW BYTES   	(a = a + Xl)
0312 f189 b7 e4 25           [ 5 ] 	STAA	XSAVD+1	UPDATE          	(Xl = a)
0313 f18c 24 03              [ 4 ] 	BCC	ARND	IF NO CARRY; YOU'RE DONE
0314 f18e 7c e4 24           [ 6 ] 	INC	XSAVD	ADD CARRY TO HIGH BYTE	(Xh = Xh +1)
0315 f191 fe e4 24           [ 5 ] ARND	LDX	XSAVD	RESULT TO X-REG		(X=[Xh,Xl])
0316 f194 39                 [ 5 ] 	RTS		** RETURN **
0317                               *
0318                               * CLEAR DISPLAY PER A-REG
0319                               *
0320 f195 ff e4 26           [ 6 ] CLRDS	STX	XSAV1		SAVE ENTRY VALUE
0321 f198 ce e4 22           [ 3 ] 	LDX	#DISBUF+5	RIGHTMOST DIGIT
0322 f19b 44                 [ 2 ] CLRLP	LSRA
0323 f19c 24 02              [ 4 ] 	BCC	ARNCLR		IF BIT IN A-REG NOT SET
0324 f19e 6f 00              [ 7 ] 	CLR	,X
0325 f1a0 09                 [ 4 ] ARNCLR	DEX			NEXT DISPLAY
0326 f1a1 8c e4 1c           [ 3 ] 	CPX	#DISBUF-1	DONE ?
0327 f1a4 26 f5              [ 4 ] 	BNE	CLRLP		CONTINUE 6 TIMES
0328 f1a6 fe e4 26           [ 5 ] 	LDX	XSAV1		RECOVER ENTRY VALUE
0329 f1a9 39                 [ 5 ] 	RTS		** RETURN **
0330                               *
0331 f1aa ff e4 26           [ 6 ] ROLL2	STX	XSAV1		SAVE ENTRY VALUE
0332 f1ad fe e4 2c           [ 5 ] 	LDX	HEXBUF		ADDR TO ROLL
0333 f1b0 7d e4 23           [ 6 ] 	TST	ROLPAS		FIRST PASS ?
0334 f1b3 27 07              [ 4 ] 	BEQ	ARNCL2
0335 f1b5 7f e4 23           [ 6 ] 	CLR	ROLPAS		THIS WAS PASS 1
0336 f1b8 6f 00              [ 7 ] 	CLR	,X		CLEAR LOG ON FIRST PASS
0337 f1ba 20 08              [ 4 ] 	BRA	R2OUT
0338 f1bc 68 00              [ 7 ] ARNCL2	ASL	,X
0339 f1be 68 00              [ 7 ] 	ASL	,X
0340 f1c0 68 00              [ 7 ] 	ASL	,X
0341 f1c2 68 00              [ 7 ] 	ASL	,X		SHIFT ROLL BYTE	4 PLACES
0342 f1c4 aa 00              [ 5 ] R2OUT	ORAA	,X		COMBINE NEW DATA
0343 f1c6 a7 00              [ 6 ] 	STAA	,X		UPDATE LOC
0344 f1c8 fe e4 26           [ 5 ] 	LDX	XSAV1		RECOVER ENTRY VALUE
0345 f1cb 39                 [ 5 ] 	RTS			** RETURN **
0346                               *
0347                               * ROLL 4 HEX INTO HEXBUF
0348                               *
0349 f1cc 37                 [ 4 ] ROLL4	PSHB			SAVE ENTRY VALUES
0350 f1cd 7d e4 23           [ 6 ] 	TST	ROLPAS		PASS 1  7
0351 f1d0 27 0b              [ 4 ] 	BEQ	ARNCL4		NO, CONTINUE
0352 f1d2 7f e4 23           [ 6 ] 	CLR	ROLPAS		YES, CLEAR FIRST PASS FLAG &
0353 f1d5 7f e4 2c           [ 6 ] 	CLR	HEXBUF		CLR FIRST 4 DIGITS ON FIRST PASS
0354 f1d8 b7 e4 2d           [ 5 ] 	STAA	HEXBUF+1	THEN PUT NEW DATA IN 4TH
0355 f1db 20 10              [ 4 ] 	BRA	R4OUT		.
0356 f1dd 48                 [ 2 ] ARNCL4	ASLA			LEFT JUSTIFY NEW DIGIT
0357 f1de 48                 [ 2 ] 	ASLA			.
0358 f1df 48                 [ 2 ] 	ASLA			.
0359 f1e0 48                 [ 2 ] 	ASLA			.
0360 f1e1 c6 03              [ 2 ] 	LDAB	#3		LOOP INDEX
0361 f1e3 49                 [ 2 ] RO4LP	ROLA			ROLLA INTO HEXBUF
0362 f1e4 79 e4 2d           [ 6 ] 	ROL	HEXBUF+1	.
0363 f1e7 79 e4 2c           [ 6 ] 	ROL	HEXBUF		.
0364 f1ea 5a                 [ 2 ] 	DECB			.
0365 f1eb 2a f6              [ 4 ] 	BPL	RO4LP		.
0366 f1ed 33                 [ 4 ] R4OUT	PULB			RECOVER B-REG
0367 f1ee 39                 [ 5 ] 	RTS			** RETURN **
0368                               *
0369 f1ef 7f e4 1c           [ 6 ] RDKEY	CLR	KYFLG		READ & ACKNOWLEDGE KEY
0370 f1f2 b6 e4 1b           [ 4 ] 	LDAA	KEY		.
0371 f1f5 39                 [ 5 ] 	RTS
0372                               ******************************************
0373                               *
0374                               * MEMCH - MEMORY CHANGE/DISPLAY/OFFSET ROUTINE
0375                               *
0376                               ******************************************
0377 f1f6 ce f2 05           [ 3 ] MEMBEG	LDX	#MEMCH
0378 f1f9 ff e4 19           [ 6 ] 	STX	MNPTR		INIT MAIN POINTER
379: symbol Undefined on pass 2
0379 f1fc 7f 00 00           [ 6 ] 	CLR	FNFCL		SET FUNCTION FLAG TO ZERO
0380 f1ff fe e4 2c           [ 5 ] 	LDX	HEXBUF		POINT AT ADDR TO DISPLAY
0381 f202 7e f2 ba           [ 3 ] 	JMP	NEWMEM		EXIT TO UPDATE DISPLAY
0382                               *
0383 f205 7d e4 1c           [ 6 ] MEMCH	TST	KYFLG		SEE IF ANY KEY PENDING
0384 f208 26 01              [ 4 ] 	BNE	MEMNOW
0385 f20a 39                 [ 5 ] 	RTS			** RETURN **
0386                               *
0387 f20b bd f1 ef           [ 9 ] MEMNOW	JSR	RDKEY		GET & ACKNOWLEDGE KEY
0388 f20e fe e4 2c           [ 5 ] 	LDX	HEXBUF		SAVES STEPS LATER
389: symbol Undefined on pass 2
0389 f211 f6 00 00           [ 4 ] 	LDAB	FNFCL		SEE IF IN OFFSET MODE
0390 f214 27 77              [ 4 ] 	BEQ	NORMAL		(NOT OFFSET MODE)
0391 f216 2b 53              [ 4 ] 	BMI	CALDUN		IF OFFSET CALC FINISHED
0392 f218 4d                 [ 2 ] 	TSTA			CHECK KEY
0393 f219 2b 0d              [ 4 ] 	BMI	OFFUN		IF FUNCTION KEY
0394 f21b bd f1 cc           [ 9 ] 	JSR	ROLL4		ENTER NUMBER KEY
0395 f21e bd f1 20           [ 9 ] OFFOUT	JSR	DYSCOD		CONVERT TO 7-SEG
0396 f221 ce 00 77           [ 3 ] OFFEND	LDX	#$0077		"A"
0397 f224 ff e4 21           [ 6 ] 	STX	DISBUF+4	STORE TO LAST DIGITS
0398 f227 39                 [ 5 ] OFFRET	RTS			** RETURN **
0399                               *
0400 f228 81 83              [ 2 ] OFFUN	CMPA	#$83		'GO' ?
0401 f22a 26 fb              [ 4 ] 	BNE	OFFRET		IF NOT; EXIT
0402 f22c fe e4 2c           [ 5 ] 	LDX	HEXBUF		GET DESTINATION OF BRANCH
0403 f22f 09                 [ 4 ] 	DEX			ADJ INSTEAD OF ADJ'ING THE SOURCE
0404 f230 ff e4 2c           [ 6 ] 	STX	HEXBUF		UPDATE
0405 f233 b6 e4 2d           [ 4 ] 	LDAA	HEXBUF+1	LOW BYTE OF DESTINATION
0406 f236 f6 e4 2c           [ 4 ] 	LDAB	HEXBUF		HI BYTE
0407 f239 b0 e4 2b           [ 4 ] 	SUBA	MEMSAV+1	SUBTRACT LOW BYTES
0408 f23c f2 e4 2a           [ 4 ] 	SBCB	MEMSAV		SUBTRACT W/ CARRY
0409 f23f 4d                 [ 2 ] 	TSTA			CHECK POLARITY OF LOW ORDER RESULT
0410 f240 2a 01              [ 4 ] 	BPL	ARNINC		IF LO POS DON'T INC HI
0411 f242 5c                 [ 2 ] 	INCB			IF LOW WAS NEG INC HI $FF - $00
0412 f243 5d                 [ 2 ] ARNINC	TSTB			IF B NOW ZERO; OFFSET IS IN RANGE
0413 f244 26 11              [ 4 ] 	BNE	BADOFF		IF NOT; TOO FAR
0414 f246 b7 e4 2e           [ 5 ] 	STAA	HEXBUF+2	SAVE RESULT
0415 f249 bd f1 20           [ 9 ] 	JSR	DYSCOD		CONVERT	TO 7-SEG
0416 f24c 86 3c              [ 2 ] 	LDAA	#%00111100	CLEAR FIRST 4 DISPLAYS
0417 f24e bd f1 95           [ 9 ] 	JSR	CLRDS
0418 f251 86 80              [ 2 ] 	LDAA	#$80
0419 f253 b7 e4 3e           [ 5 ] 	STAA	FNCFL		INDICATE CALC DONE; & OK
0420 f256 39                 [ 5 ] 	RTS			** RETURN **
0421                               *
0422 f257 ce ba d0           [ 3 ] BADOFF	LDX	#$BAD0		
0423 f25a ff e4 2c           [ 6 ] 	STX	HEXBUF
0424 f25d bd f1 20           [ 9 ] 	JSR	DYSCOD		WRITE *BAD* IN FIRST 3 DISPLAYS
0425 f260 86 07              [ 2 ] 	LDAA	#%00000111
0426 f262 bd f1 95           [ 9 ] 	JSR	CLRDS		CLEAR UNUSED DIGITS
0427 f265 86 ff              [ 2 ] 	LDAA	#$FF
0428 f267 b7 e4 3e           [ 5 ] 	STAA	FNCFL		INDICATE OFFSET NOT VALID
0429 f26a 39                 [ 5 ] 	RTS			** RETURN **
0430                               *
0431 f26b 5c                 [ 2 ] CALDUN	INCB			IF IT WAS $FF IT'S NOW 0
0432 f26c 27 13              [ 4 ] 	BEQ	BADCAL		OFFSET WAS BAD
0433 f26e fe e4 2a           [ 5 ] 	LDX	MEMSAV		RECOVER MEM ADDR
0434 f271 81 85              [ 2 ] 	CMPA	#$85		FUNCTION CLEAR KEY ?
0435 f273 27 13              [ 4 ] 	BEQ	MEMBAK		YES, DON'T SAVE OFFSET
0436 f275 81 83              [ 2 ] 	CMPA	#$83		'GO' ?
0437 f277 26 ae              [ 4 ] 	BNE	OFFRET		'GO' IS ONLY VALID KEY HERE
0438 f279 b6 e4 2e           [ 4 ] 	LDAA	HEXBUF+2	GET CALC'D OFFSET
0439 f27c a7 00              [ 6 ] 	STAA	,X		STORE TO MEM
0440 f27e 08                 [ 4 ] 	INX			ADV TO NEXT MEM ADDR
0441 f27f 20 07              [ 4 ] 	BRA	MEMBAK		BACK TO MEM CHANGE
0442                               *
0443 f281 81 80              [ 2 ] BADCAL	CMPA	#$80		'MD' ?
444: symbol Undefined on pass 2
444: Branch out of Range
0444 f283 26 fe              [ 4 ] 	BNE	OFFSET		'MD' IS THE ONLY VALID KEY HERE
0445 f285 fe e4 2a           [ 5 ] 	LDX	MEMSAV		RECOVER MEM ADDRESS
0446 f288 7f e4 3e           [ 6 ] MEMBAK	CLR	FNCFL		SIGNAL NOT IN OFFSET MODE
0447 f28b 20 2d              [ 4 ] 	BRA	NEWMEM		RE-ENTER MEM CHANGE
0448                               *
0449 f28d 4d                 [ 2 ] NORMAL	TSTA			SET COND CODES
0450 f28e 2a 25              [ 4 ] 	BPL	NUM		IF NUMBER KEY
0451 f290 81 80              [ 2 ] 	CMPA	#$80		'MD' ?
0452 f292 26 03              [ 4 ] 	BNE	NXM1		NO, CHECK FOR 'GO'
0453 f294 09                 [ 4 ] 	DEX			BACK UP
0454 f295 20 23              [ 4 ] 	BRA	NEWMEM		.
0455                               *	
0456 f297 81 83              [ 2 ] NXM1	CMPA	#$83		'GO' ?
0457 f299 26 03              [ 4 ] 	BNE	NXM2		NO, CHECK FOR 'FS'
0458 f29b 08                 [ 4 ] 	INX			YES, ADVANCE
0459 f29c 20 1c              [ 4 ] 	BRA	NEWMEM		.
0460 f29e 81 84              [ 2 ] NXM2	CMPA	#$84		'FS' ?
0461 f2a0 26 1d              [ 4 ] 	BNE	MEMOUT		NO MORE VALID KEYS
0462 f2a2 96 00              [ 3 ] 	LDAA	$%00111111
463: symbol Undefined on pass 2
0463 f2a4 bd 00 00           [ 9 ] 	JSR	CLDS		.
0464 f2a7 86 01              [ 2 ] 	LDAA	#1		.
0465 f2a9 b7 e4 3e           [ 5 ] 	STAA	FNCFL		SET OFFSET MODE
0466 f2ac b7 e4 23           [ 5 ] 	STAA	ROLPAS		SET FIRST PASS
0467 f2af ff e4 2a           [ 6 ] 	STX	MEMSAV		SAVE MEM CHG POINTER
0468 f2b2 7e f2 21           [ 3 ] 	JMP	OFFEND
0469                               *
0470 f2b5 bd f1 aa           [ 9 ] NUM	JSR	ROLL2		ENTER NEW DIGIT
0471 f2b8 20 05              [ 4 ] 	BRA	MEMOUT		DON'T SET FIRST PASS
0472                               *
0473 f2ba 86 01              [ 2 ] NEWMEM	LDAA	#1
0474 f2bc b7 e4 23           [ 5 ] 	STAA	ROLPAS		SET FIRST PASS FLAG
0475                               *
0476 f2bf a6 00              [ 5 ] MEMOUT	LDAA	,X		GET DATA TO DISPLAY
0477 f2c1 b7 e4 2e           [ 5 ] 	STAA	HEXBUF+2	UPDATE HEX BUFFER
0478 f2c4 ff e4 2c           [ 6 ] 	STX	HEXBUF		UPDATE ADDR
0479 f2c7 7e f1 20           [ 3 ] 	JMP	DYSCOD		CONV TO 7-SEG
0480                               *
0481                               
0482                               ******************************************
0483                               *
0484                               * REGDIS - REGISTER DISPLAY/CHANGE ROUTINE
0485                               *
0486                               ******************************************
0487 f2ca 7d e4 3e           [ 6 ] REGBEG	TST	FNCFL		SEE IF IN VERIFY
0488 f2cd 27 06              [ 4 ] 	BEQ	NOTVRF
0489 f2cf 7f e4 3e           [ 6 ] 	CLR	FNCFL		SIGNAL VERIFY
0490 f2d2 7e f4 dc           [ 3 ] 	JMP	LDTAP		GO VERIFY TAPE
0491 f2d5 ce f2 ee           [ 3 ] NOTVRF	LDX	#REGDIS
0492 f2d8 ff e4 19           [ 6 ] 	STX	MNPTR		INIT MAIN POINTER
0493 f2db ce f0 bb           [ 3 ] 	LDX	#PUT		SET TO RTS...
0494 f2de ff e4 7d           [ 6 ] 	STX	STKTOP-1	WILL BE TO PUT
0495 f2e1 8e e4 7c           [ 3 ] 	LDS	#STKTOP-2	INIT STACK POINTER
0496 f2e4 7f e4 41           [ 6 ] 	CLR	REGNO		INTI REG # = UPC
0497 f2e7 86 01              [ 2 ] 	LDAA	#1
0498 f2e9 b7 e4 23           [ 5 ] 	STAA	ROLPAS		INDICATE FIRST PAS
0499 f2ec 20 40              [ 4 ] 	BRA	REGOUT		TO UPDATE DISPLAY
0500                               *
0501 f2ee 7d e4 1c           [ 6 ] REGDIS	TST	KYFLG		SEE IF ANY KEY PENDING
0502 f2f1 26 01              [ 4 ] 	BNE	REGNOW
0503 f2f3 39                 [ 5 ] 	RTS
0504                               * 
0505 f2f4 bd f1 ef           [ 9 ] REGNOW	JSR	RDKEY		GET & ACKNOWLEDGE KEY
0506 f2f7 2b 05              [ 4 ] 	BMI	REGFNC		IF FUNCTION KEY
0507 f2f9 bd f1 cc           [ 9 ] 	JSR	ROLL4
0508 f2fc 20 30              [ 4 ] 	BRA	REGOUT		UPDATE DISPLAY & EXIT
0509                               *
0510 f2fe 81 80              [ 2 ] REGFNC	CMPA	#$80		'MD' ?
0511 f300 26 0d              [ 4 ] 	BNE	NXR1
0512 f302 b6 e4 41           [ 4 ] 	LDAA	REGNO
0513 f305 4a                 [ 2 ] 	DECA
0514 f306 2a 02              [ 4 ] 	BPL	ARNR1
0515 f308 86 05              [ 2 ] 	LDAA	#5		WRAP AROUND
0516 f30a b7 e4 41           [ 5 ] ARNR1	STAA	REGNO		UPDATE
0517 f30d 20 10              [ 4 ] 	BRA	NEWREG		SET UP NEW REG ON EXIT
0518                               *
0519 f30f 81 83              [ 2 ] NXR1	CMPA	#$83		'GO'
0520 f311 26 11              [ 4 ] 	BNE	RUNONE		IGNORE INVALID ENTRY
0521 f313 b6 e4 41           [ 4 ] 	LDAA	REGNO
0522 f316 4c                 [ 2 ] 	INCA
0523 f317 81 06              [ 2 ] 	CMPA	#6		PAST ?
0524 f319 26 01              [ 4 ] 	BNE	ARNR2		
0525 f31b 4f                 [ 2 ] 	CLRA			WRAP AROUND
0526 f31c b7 e4 41           [ 5 ] ARNR2	STAA	REGNO		UPDATE
0527 f31f 86 01              [ 2 ] NEWREG	LDAA	#1
0528 f321 b7 e4 23           [ 5 ] 	STAA	ROLPAS
0529                               *
0530 f324 81 87              [ 2 ] RUNONE	CMPA	#$87		T/B KEY ?
0531 f326 26 06              [ 4 ] 	BNE	REGOUT		NO, RETURN
0532 f328 ce f2 ca           [ 3 ] 	LDX	#REGBEG		YES, SET UP RETURN ADDR
0533 f32b 7e f7 01           [ 3 ] 	JMP	ROI		.
0534                               *
0535 f32e b6 e4 41           [ 4 ] REGOUT	LDAA	REGNO
0536 f331 48                 [ 2 ] 	ASLA
0537 f332 48                 [ 2 ] 	ASLA			4-BYTES PER BLOCK ENTRY
0538 f333 fe f3 70           [ 5 ] 	LDX	REGTBL		TOP OF INFO TABLE
0539 f336 bd f1 83           [ 9 ] 	JSR	ADDAX		POINT AT TABLE ENTRY
0540 f339 a6 03              [ 5 ] 	LDAA	3,X		GET 7-SEG INFO
0541 f33b 36                 [ 4 ] 	PSHA			SAVE ON STACK
0542 f33c a6 02              [ 5 ] 	LDAA	2,X		.
0543 f33e 36                 [ 4 ] 	PSHA			.
0544 f33f ee 00              [ 6 ] 	LDX	,X		GET ADDR OF DESIRED REG
0545 f341 7d e4 23           [ 6 ] 	TST	ROLPAS		SEE IF NEW REG
0546 f344 27 0a              [ 4 ] 	BEQ	NOTNEW
0547 f346 a6 00              [ 5 ] 	LDAA	,X		STORE CURRENT VAL TO DISPLAY
0548 f348 b7 e4 2c           [ 5 ] 	STAA	HEXBUF		.
0549 f34b a6 01              [ 5 ] 	LDAA	1,X		.
0550 f34d b7 e4 2d           [ 5 ] 	STAA	HEXBUF+1	.
0551                               *
0552 f350 bd f1 20           [ 9 ] NOTNEW	JSR	DYSCOD		TO CONVERT TO 7-SEG
0553 f353 32                 [ 4 ] 	PULA			RECOVER DISPLAY CODES
0554 f354 b7 e4 21           [ 5 ] 	STAA	DISBUF+4	& STORE TO DISP BUFFER
0555 f357 32                 [ 4 ] 	PULA			.
0556 f358 b7 e4 22           [ 5 ] 	STAA	DISBUF+5	.
0557 f35b 2a 08              [ 4 ] 	BPL	ARNR3		.
0558 f35d 7f e4 1d           [ 6 ] 	CLR	DISBUF		CLEAR UNUSED DISPLAYS
0559 f360 7f e4 1e           [ 6 ] 	CLR	DISBUF+1	.
0560 f363 20 05              [ 4 ] 	BRA	ONLY1		.
0561 f365 b6 e4 2c           [ 4 ] ARNR3	LDAA	HEXBUF		UPDATE HIGH OF PSEUDO REG
0562 f368 a7 00              [ 6 ] 	STAA	,X		.
0563 f36a b6 e4 2d           [ 4 ] ONLY1	LDAA	HEXBUF+1	.
0564 f36d a7 01              [ 6 ] 	STAA	1,X		UPDATE LOW BYTE
0565 f36f 39                 [ 5 ] 	RTS			** RETURN **
0566                               *
0567                               *
0568 f370 e4 36                    REGTBL	FDB	UPC
0569 f372 73 39                    	FCB	%01110011,%00111001
0570                               *
0571 f374 e4 32                    	FDB	UA-1
0572 f376 00 f7                    	FCB	%00000000,%11110111
0573                               *
0574 f378 e4 31                    	FDB	UB-1
0575 f37a 00 fc                    	FCB	%00000000,%11111100
0576                               *
0577 f37c e4 34                    	FDB	UX
0578 f37e 06 5e                    	FCB	%00000110,%01011110
0579                               *
0580 f380 e4 2f                    	FDB	USP
0581 f382 6d 73                    	FCB	%01101101,%01110011
0582                               *
0583 f384 e4 30                    	FDB	UCC-1
0584 f386 39 b9                    	FCB	%00111001,%10111001
0585                               * 
0586                               
0587                               ******************************************
0588                               *
0589                               * BRKBEG - BREAKPOINT EDITOR
0590                               *
0591                               ******************************************
0592 f388 7d e4 3e           [ 6 ] BRKBEG	TST	FNCFL		FUNCTION FLAG SET ?
0593 f38b 26 01              [ 4 ] 	BNE	BRKEDT		YES, EDIT BREAKPOINTS
0594 f38d 39                 [ 5 ] 	RTS			NO, TAKE NO ACTION
0595 f38e ce f3 9c           [ 3 ] BRKEDT	LDX	#BRKPNT		SET MNPTR WITH BREAKPOINT ROUTINE
0596 f391 ff e4 19           [ 6 ] 	STX	MNPTR		.
0597 f394 86 01              [ 2 ] 	LDAA	#$01		SET UP FOR ADDR INPUT
0598 f396 b7 e4 23           [ 5 ] 	STAA	ROLPAS		.
599: symbol Undefined on pass 2
0599 f399 7e 00 00           [ 3 ] 	JMP	DISBRK		DISPLAY NEXT BKPT
0600 f39c 7d e4 1c           [ 6 ] BRKPNT	TST	KYFLG		KEY PENDING ?
0601 f39f 26 01              [ 4 ] 	BNE	BRKTST		YES, DECODE KEY ?
0602 f3a1 39                 [ 5 ] 	RTS			NO, RETURN TO PUT
0603 f3a2 bd f1 ef           [ 9 ] BRKTST	JSR	RDKEY		GET & ACKNOWLEDGE KEY
0604 f3a5 81 0f              [ 2 ] 	CMPA	#$0F		HEX ?
0605 f3a7 22 06              [ 4 ] 	BHI	NOTHEX		NO, CHECK FOR FUNCTION
0606 f3a9 bd f1 cc           [ 9 ] 	JSR	ROLL4		YES, ROLL INTO HEXBUF
0607 f3ac 7e f1 20           [ 3 ] 	JMP	DYSCOD		DISPLAY & RETURN TO PUT
0608 f3af 81 84              [ 2 ] NOTHEX	CMPA	#$84		FS KEY ?
0609 f3b1 26 02              [ 4 ] 	BNE	CKFC		NO, TRY FC
0610 f3b3 20 3c              [ 4 ] 	BRA	BKTOTB		YES, ENTER AS BKPT & RETURN
0611 f3b5 81 85              [ 2 ] CKFC	CMPA	#$85		FC KEY ?
0612 f3b7 26 03              [ 4 ] 	BNE	CKGO		NO, CHECK FOR GO
613: symbol Undefined on pass 2
0613 f3b9 7e 00 00           [ 3 ] 	JMP	BKFMTB		YES, REMOVE A BKPT
0614 f3bc 81 83              [ 2 ] CKGO	CMPA	#$83		GO KEY ?
0615 f3be 26 30              [ 4 ] 	BNE	DISDUN		YES, DISPLAY NEXT BKPT & RETURN
0616                               *
0617                               * DISBRK - DISPLAY NEXT BREAKPOINT
0618                               *
0619 f3c0 b6 e4 44           [ 4 ] DISBRKA	LDAA	BRKNO		GET # INTO HEXBUF
0620 f3c3 b7 e4 2e           [ 5 ] 	STAA	HEXBUF+2	ANY BREAKPOINTS ?
0621 f3c6 27 1b              [ 4 ] 	BEQ	BACK		NO, RETURN
0622 f3c8 fe e4 42           [ 5 ] 	LDX	BKPNTR		YES, DISPLAY NEXT ONE
0623 f3cb 08                 [ 4 ] BKLOOP	INX			.
0624 f3cc 08                 [ 4 ] 	INX			.
0625 f3cd 08                 [ 4 ] 	INX			.
0626 f3ce 08                 [ 4 ] 	INX			.
0627 f3cf 8c e4 59           [ 3 ] 	CPX	#BRKEND		END OF TAB
0628 f3d2 26 03              [ 4 ] 	BNE	NOTEND		NO, GO TEST FOR BKPT
0629 f3d4 ce e4 45           [ 3 ] 	LDX	#BRKTAB		YES, WRAP AROUND
0630 f3d7 6d 03              [ 7 ] NOTEND	TST	3,X		BREAKPOINT ?
0631 f3d9 27 f0              [ 4 ] 	BEQ	BKLOOP		NO, TRY NEXT LOC
632: symbol Undefined on pass 2
0632 f3db ff 00 00           [ 6 ] 	STX	BKPTR		YES, MOVE POINTER
0633 f3de ee 00              [ 6 ] 	LDX	0,X		GET BKPT ADDR
0634 f3e0 ff e4 2c           [ 6 ] 	STX	HEXBUF		& DISPLAY IT
635: symbol Undefined on pass 2
0635 f3e3 bd 00 00           [ 9 ] BACK	JSR	DISCOD		.
0636 f3e6 7d e4 44           [ 6 ] 	TST	BRKNO		ANY BREALPOINTS ?
0637 f3e9 26 05              [ 4 ] 	BNE	DISDUN		YES, RETURN
0638 f3eb 86 fe              [ 2 ] 	LDAA	#$FE		MASK ALL BUT LSD
0639 f3ed bd f1 95           [ 9 ] 	JSR	CLRDS		.
0640 f3f0 39                 [ 5 ] DISDUN	RTS			RETURN TO PUT
0641                               *
0642                               * BKTOTB-ENTER A BREAKPOINT FROM HEXBUF INTO
0643                               *	THE TABLE & UPDATEBRKNO
0644                               *
0645 f3f1 bd f4 a0           [ 9 ] BKTOTB	JSR	FNDBRK		BREAKPOINT EXIST?
0646 f3f4 25 32              [ 4 ] 	BCS	FULL		YES, RETURN
0647 f3f6 8d 46              [ 8 ] 	BSR	BKNO		FIND OPEN SPACE
0648 f3f8 b6 e4 44           [ 4 ] 	LDAA	BRKNO		GET # OF BREAKPOINTS
0649 f3fb 81 05              [ 2 ] 	CMPA	#$05		FULL ?
0650 f3fd 2c 29              [ 4 ] 	BGE	FULL		YES
0651                               * CHECK FOR RAM
0652 f3ff fe e4 2c           [ 5 ] 	LDX	HEXBUF		TEST FOR RAM
0653 f402 a6 00              [ 5 ] 	LDAA	0,X		.
0654 f404 43                 [ 2 ] 	COMA			.
0655 f405 63 00              [ 7 ] 	COM	0,X		.
0656 f407 a1 00              [ 5 ] 	CMPA	0,X		RAM ?
0657 f409 26 1d              [ 4 ] 	BNE	FULL		NO, RETURN
0658 f40b 43                 [ 2 ] 	COMA			YES, RESTORE DATA
0659 f40c a7 00              [ 6 ] 	STAA	0,X		.
0660                               * ENTER BKPT INTO TABLE
0661 f40e fe e4 42           [ 5 ] 	LDX	BKPNTR		POINT INTO BREAKPOINT TAB
0662 f411 a7 02              [ 6 ] 	STAA	2,X		SAV OPCODE
0663 f413 b6 e4 2c           [ 4 ] 	LDAA	HEXBUF		GET OP CODE ADDR
0664 f416 f6 e4 2d           [ 4 ] 	LDAB	HEXBUF+1	.
0665 f419 a7 00              [ 6 ] 	STAA	0,X		INSERT BREAKPOINT
0666 f41b e7 01              [ 6 ] 	STAB	1,X		.
667: symbol Undefined on pass 2
0667 f41d 7c 00 00           [ 6 ] 	INC	BRKN0		COUNT BREALPOINT
0668 f420 6c 03              [ 7 ] 	INC	3,X		FLAG BREAKPOINT
0669 f422 7c e4 2e           [ 6 ] 	INC	HEXBUF+2	UPDATE BKPT NO.
0670 f425 bd f1 20           [ 9 ] 	JSR	DYSCOD		.
0671 f428 86 01              [ 2 ] FULL	LDAA	#$01		RESET ROLPAS
0672 f42a b7 e4 23           [ 5 ] 	STAA	ROLPAS		.
0673 f42d 39                 [ 5 ] 	RTS			& RETURN
0674                               *
0675                               * BKFMTB - REMOVE A BREAKPOINT FROM BUFFER
0676                               *	& UPDATE BRKNO
0677                               *
0678 f42e 8d 70              [ 8 ] BKFTMB	BSR	FNDBRK		BKPT (DISBUF) IN TABLE ?
679: symbol Undefined on pass 2
679: Branch out of Range
0679 f430 24 fe              [ 4 ] 	BCC	DISBRK		NO, RETURN
0680 f432 fe e4 42           [ 5 ] 	LDX	BKPNTR		YES, GET ITS ADDR
0681 f435 6f 03              [ 7 ] 	CLR	3,X		& REMOVE IT
0682 f437 6f 02              [ 7 ] 	CLR	2,X		REMOVE OP CODE
0683 f439 7a e4 44           [ 6 ] 	DEC	BRKNO		UPDATE	COUNT
684: symbol Undefined on pass 2
684: Branch out of Range
0684 f43c 20 fe              [ 4 ] 	BRA	DISBRK		DISPLAY BKPT & RETURN
0685                               *
0686                               * BKNO - FIND NUMBER OF BREAKPOINTS, UPDATE BRKNO
0687                               *	 & PUT ADDRESS OF LAST OPEN SPACE INTO BKPNTR
0688                               *
0689 f43e 7f e4 44           [ 6 ] BKNO	CLR	BRKNO
0690 f441 ce e4 45           [ 3 ] 	LDX	#BRKTAB
0691 f444 6d 03              [ 7 ] BKLOP	TST	3,X		BREAKPOINT HERE ?
0692 f446 27 05              [ 4 ] 	BEQ	NEXT1		NO, TRY NEXT ENTRY
0693 f448 7c e4 44           [ 6 ] 	INC	BRKNO		YES, COUNT IT
0694 f44b 20 03              [ 4 ] 	BRA	ISBKPT		SO DONT SAVE ADDR
0695 f44d ff e4 42           [ 6 ] NEXT1	STX	BKPNTR		& SAVE ADDR
0696 f450 08                 [ 4 ] ISBKPT	INX			POINT TO NEXT ENTRY
0697 f451 08                 [ 4 ] 	INX			.
0698 f452 08                 [ 4 ] 	INX			.
0699 f453 08                 [ 4 ] 	INX			.
0700 f454 8c e4 59           [ 3 ] 	CPX	#BRKEND		DONE ?
0701 f457 26 eb              [ 4 ] 	BNE	BKLOP		NO, CONTINUE
0702 f459 86 01              [ 2 ] 	LDAA	#$01		RESET ROLPAS
0703 f45b b7 e4 23           [ 5 ] 	STAA	ROLPAS		.
0704 f45e 39                 [ 5 ] 	RTS			YES
0705                               ******************************************
0706                               *
0707                               * INBKS - INSERT BREAKPOINTS FROM TABLE TO MEM
0708                               *
0709                               ******************************************
0710 f45f 7d e4 44           [ 6 ] INBKS	TST	BRKNO		BREAKPOINTS ?
0711 f462 27 20              [ 4 ] 	BEQ	NOBPT		NO, RETURN
0712 f464 ce e4 45           [ 3 ] 	LDX	#BRKTAB		YES, INSTALL'EM
0713 f467 6d 03              [ 7 ] CKBKPT	TST	3,X		BREAKPOINT ?
0714 f469 27 10              [ 4 ] 	BEQ	NEXT2		NO, TRY NEXT ENTRY
0715                               * INSTALL THE BREAKPOINT
0716 f46b ff e4 42           [ 6 ] 	STX	BKPNTR		SAVE X
0717 f46e 86 3f              [ 2 ] 	LDAA	#$3F		SWI
0718 f470 ee 00              [ 6 ] 	LDX	0,X		GET ADDR
0719 f472 e6 00              [ 5 ] 	LDAB	0,X		GET OP CODE
0720 f474 a7 00              [ 6 ] 	STAA	0,X		STORE SWI
0721 f476 fe e4 42           [ 5 ] 	LDX	BKPNTR		RESTORE X
0722 f479 e7 02              [ 6 ] 	STAB	2,X		SAVE OPCODE
0723                               *	NEXT ENTRY
0724 f47b 08                 [ 4 ] NEXT2	INX			.
0725 f47c 08                 [ 4 ] 	INX			.
0726 f47d 08                 [ 4 ] 	INX			.
0727 f47e 08                 [ 4 ] 	INX			.
0728 f47f 8c e4 59           [ 3 ] 	CPX	#BRKEND		DONE ?
0729 f482 26 e3              [ 4 ] 	BNE	CKBKPT		NO, CONTINUE
0730 f484 39                 [ 5 ] NOBPT	RTS
0731                               ******************************************
0732                               *
0733                               * OUTBKS - REMOVE BREAKPOINTS FROM MEMORY
0734                               *
0735                               ******************************************
0736 f485 ce e4 45           [ 3 ] OUTBKS	LDX	#BRKTAB		POINT TO BREAKPOINT TAB
0737 f488 a6 02              [ 5 ] REMOV1	LDAA	2,X		OP CODE ?
0738 f48a 27 0a              [ 4 ] 	BEQ	NEXT3		NO, TRY NEXT ENTRY
0739                               * REMOVE BREAKPOINT FROM RAM
0740 f48c ff e4 42           [ 6 ] 	STX	BKPNTR		SAVE X
0741 f48f ee 00              [ 6 ] 	LDX	0,X		GET MEM ADDR
0742 f491 a7 00              [ 6 ] 	STAA	0,X		INSERT OPCODE
0743 f493 fe e4 42           [ 5 ] 	LDX	BKPNTR		RESTORE X
0744                               * NEXT ENTRY
0745 f496 08                 [ 4 ] NEXT3	INX			.
0746 f497 08                 [ 4 ] 	INX			.
0747 f498 08                 [ 4 ] 	INX			.
0748 f499 08                 [ 4 ] 	INX			.
0749 f49a 8c e4 59           [ 3 ] 	CPX	#BRKEND		DONE ?
0750 f49d 26 e9              [ 4 ] 	BNE	REMOV1		NO, CONTINUE
0751 f49f 39                 [ 5 ] 	RTS			YES, RETURN
0752                               *
0753                               * FDBRK - FIND BREAKPOINT (NEXBUF) IN BRKTAB
0754                               * 	 BRKPNTR POINTS AT BREAKPOINT & CARRY
0755                               *	 IS SET IF BREAKPOINT EXISTS, ELSE C IS =R"'0"
0756                               *
0757 f4a0 b6 e4 2c           [ 4 ] FNDBRK	LDAA	HEXBUF		BREAKPOINT MSB
0758 f4a3 f6 e4 2d           [ 4 ] 	LDAB	HEXBUF+1	BREAKPOINT LDB
0759 f4a6 ce e4 45           [ 3 ] 	LDX	#BRKTAB		BREAKPOINT TAB
0760 f4a9 a1 00              [ 5 ] BRKLOOP	CMPA	0,X		MATCH ?
0761 f4ab 27 0b              [ 4 ] 	BEQ	CKLSB		YES
0762 f4ad 08                 [ 4 ] NEXT	INX			NO POINT TO NEXT
0763 f4ae 08                 [ 4 ] 	INX			.
0764 f4af 08                 [ 4 ] 	INX			.
0765 f4b0 08                 [ 4 ] 	INX			.
0766 f4b1 8c e4 59           [ 3 ] 	CPX	#BRKEND		DONE ?
767: symbol Undefined on pass 2
767: Branch out of Range
0767 f4b4 26 fe              [ 4 ] 	BNE	BRKLOP		NO, CONTINUE
0768 f4b6 0c                 [ 2 ] 	CLC			YES, BUT NO BKPT
0769 f4b7 39                 [ 5 ] 	RTS
0770 f4b8 e1 01              [ 5 ] CKLSB	CMPB	1,X		MATCH ?
0771 f4ba 26 f1              [ 4 ] 	BNE	NEXT		NO, TRY NEXT ENTRY
0772 f4bc 6d 03              [ 7 ] 	TST	3,X		BREAKPOINT ACTIVE ?
0773 f4be 27 ed              [ 4 ] 	BEQ	NEXT		NO TRY AGAIN
0774 f4c0 0d                 [ 2 ] 	SEC			YES, FOUND IT
0775 f4c1 ff e4 42           [ 6 ] 	STX	BKPNTR		SAVE ADDR
0776 f4c4 39                 [ 5 ] 	RTS
0777                               ******************************************
0778                               *
0779                               * PSET - SET FUNCTION FLAG & DISPLAY "FS"
0780                               *
0781                               ******************************************
0782 f4c5 86 01              [ 2 ] PSET	LDAA	#$01		TO SET FUNCTION FLAG
0783 f4c7 ce 07 16           [ 3 ] 	LDX	#$716S		CODE FOR "FS"
0784 f4ca b7 e4 3e           [ 5 ] FOUT	STAA	FNCFL		
0785 f4cd ff e4 21           [ 6 ] 	STX	DISBUF+4	.
0786 f4d0 39                 [ 5 ] 	RTS			RETURN TO PUT
0787                               ******************************************
0788                               *
0789                               * FCLR - CLEAR FUNCTION FLAG & LAST 2 DIGITS
0790                               *
0791                               ******************************************
0792 f4d1 4f                 [ 2 ] FCLR	CLRA			TO CLEAR FUNCTION FLAG
0793 f4d2 ce 00 00           [ 3 ] 	LDX	#$0000		TO CLEARLAST 2 DIGITS
0794 f4d5 20 f3              [ 4 ] 	BRA	FOUT
0795                               ******************************************
0796                               *
0797                               * TAPES - SOFTWARE CASSETE TAPE INTERFACE
0798                               *
0799                               ******************************************
0800 f4d7 7d e4 3e           [ 6 ] TAPEBEG	TST	FNCFL		SEE IF PUNCH OR LOAD
0801 f4da 27 06              [ 4 ] 	BEQ	PCH
0802 f4dc bd f6 9c           [ 9 ] LDTAP	JSR	LOAD		DO LOAD (OR VERF)
0803 f4df 7e f0 24           [ 3 ] 	JMP	PROMPT		WHEN DONE
0804                               *
0805 f4e2 ce f4 ec           [ 3 ] PCH	LDX	#BEGEND		POINT AT BEGEND ROUTINE
0806 f4e5 ff e4 19           [ 6 ] 	STX	MNPTR		ACTIVATE
0807 f4e8 86 bb              [ 2 ] 	LDAA	#$BB
0808 f4ea 20 1d              [ 4 ] 	BRA	CONOUT		DISPLAY	BB IN LAST DISPLAYS
0809                               *
0810 f4ec 7d e4 1c           [ 6 ] BEGEND	TST	KYFLG		SEE IF KEY PENDING
0811 f4ef 26 01              [ 4 ] 	BNE	ASNOW
0812 f4f1 39                 [ 5 ] 	RTS			** RETURN NO KEY **
0813                               *
0814 f4f2 bd f1 ef           [ 9 ] ASNOW	JSR	RDKEY		READ & ACKNOWLEDGE KEY
0815 f4f5 2b 05              [ 4 ] 	BMI	FUNK		FUNCTION KEY
0816 f4f7 bd f1 cc           [ 9 ] 	JSR	ROLL4		ENTER NEW NUMBER
0817 f4fa 20 16              [ 4 ] 	BRA	DYSOUT		CONVERT TO 7-SEG & LEAVE
0818                               *
0819 f4fc 86 ee              [ 2 ] FUNK	LDAA	#$EE
0820 f4fe b1 e4 2e           [ 4 ] 	CMPA	HEXBUF+2	END ADDR DONE ?
0821 f501 27 12              [ 4 ] 	BEQ	DOPCH		GO DO PUNCH
0822 f503 fe e4 2c           [ 5 ] 	LDX	HEXBUF		SAVE ENTERED ADDR
0823 f506 ff e4 60           [ 6 ] 	STX	BEGAD		
0824 f509 b7 e4 2e           [ 5 ] CONOUT	STAA	HEXBUF+2	'EE' OR 'BB' TO LAST DISPLAYS
0825 f50c 7f e4 2c           [ 6 ] 	CLR	HEXBUF		CLEAR FIRST FOUR NIBBLES
0826 f50f 7f e4 2d           [ 6 ] 	CLR	HEXBUF+1	
0827 f512 7e f1 20           [ 3 ] DYSOUT	JMP	DYSCOD		CONV & RETURN
0828                               *
0829 f515 fe e4 2c           [ 5 ] DOPCH	LDX	HEXBUF		SAVE ENTERED ADDR
0830 f518 ff e4 62           [ 6 ] 	STX	ENDAD
0831 f51b bd f6 30           [ 9 ] 	JSR	PUNCH		PUNCH TAPE
0832 f51e 7e f0 24           [ 3 ] 	JMP	PROMPT		WHEN DONE
0833                               *
0834                               ******************************************
0835                               * FEDGE - ROUTINE TO LOCATE AN EDGE (POS OR NEG)
0836                               *         AND DETERMINE DISTANCE TO IT (TIME)
0837                               *		EXECUTION TIME TUNNED
0838                               ******************************************
0839                               *				FOR BSR
0840 f521 86 05              [ 2 ] FEDGE	LDAA	#5		START COUNT=FIXED (-1)
0841 f523 f6 e4 84           [ 4 ] 	LDAB	PIADP		CLEAR INTERRUPT
0842 f526 01                 [ 2 ] 	NOP			DELAY
0843 f527 4c                 [ 2 ] LOOPF	INCA			DURATION COUNT IN A-REG
0844 f528 f6 e4 85           [ 4 ] 	LDAB	PIACR		CHECK FOR EDGE FOUND
0845 f52b 2a fa              [ 4 ] 	BPL	LOOPF		IF NOT KEEP LOOKING
0846 f52d c8 02              [ 2 ] 	EORB	#$02		INVERT EDGE SENSE CONTROL
0847 f52f f7 e4 85           [ 5 ] 	STAB	PIACR		PIA LOOKS FOR OTHER EDGE
0848 f532 39                 [ 5 ] 	RTS			** RETURN **
0849                               
0850                               ******************************************
0851                               * TIN - READ 1 BYTE FROM TAPE
0852                               *       TIME TUNNED
0853                               *
0854                               ******************************************
0855                               *				FOR JSR
0856 f533 96 ff              [ 3 ] TIN	LDAA	$FF
0857 f535 b7 e4 59           [ 5 ] 	STAA	BYTE		INITIALIZE BYTE
0858 f538 7f e4 5a           [ 6 ] 	CLR	CYCNT		
0859 f53b 7f e4 5b           [ 6 ] 	CLR	CYCNT+1		INIT BIT-TIME COUNT
0860 f53e 7f e4 5c           [ 6 ] 	CLR	GOOD1S		INIT LOGIC SENSE
0861 f541 8d de              [ 8 ] 	BSR	FEDGE		[22/21+-5] SYNC TO AN EDGE
0862 f543 7d f5 43           [ 6 ] 	TST	*		DELAY
0863 f546 7d f5 46           [ 6 ] NOTSH	TST	*		DELAY
0864 f549 b7 e4 5d           [ 5 ] 	STAA	OLD		*
0865 f54c 8d d3              [ 8 ] 	BSR	FEDGE		[22/21+-5] MEASURE TO NEXT EDGE
0866 f54e 81 1b              [ 2 ] 	CMPA	#27		<1.5 SHORT HALF ?
0867 f550 2c f4              [ 4 ] 	BGE	NOTSH		MUST FIND SHORT FIRST
0868 f552 b7 e4 5d           [ 5 ] LOOPS	STAA	OLD		SAVE LAST COUNT
0869 f555 8d ca              [ 8 ] 	BSR	FEDGE		[22/21+-5] MEASURE TO NEXT
0870 f557 16                 [ 2 ] 	TAB			MAKE EXTRA COPY
0871 f558 fb e4 5d           [ 4 ] 	ADDB	OLD		SUM OF LAST 2
0872 f55b c1 2b              [ 2 ] 	CMPB	#43		> 2.33 NOM. SHORTS?
0873 f55d 2f f3              [ 4 ] 	BLE	LOOPS		KEEP LOOKING FOR LONG
0874                               *
0875                               * EDGE SENSE SET-UP TO SENSE TRAILING EDGES OF CYCLES
0876                               * & YOU ARE IN THE MIDDLE OF THE FIRST LONG CYCLE
0877                               *
0878 f55f 7e f5 62           [ 3 ] 	JMP	*+3		DELAY
0879 f562 f6 e4 84           [ 4 ] 	LDAB	PIADP		CLEAR	INTERRUPT FLAG
0880 f565 8b 05              [ 2 ] 	ADDA	#5		COMPENSATE FOR PROCESSING
0881 f567 20 10              [ 4 ] 	BRA	SYNCIN		BRANCH INTO COUNT LOOP
0882 f569 86 00              [ 2 ] LPOUT	LDAA	#0		INIT BIT TIME COUNT
0883 f56b 20 00              [ 4 ] 	BRA	LPMID		DELAY
0884 f56d 7f e4 5a           [ 6 ] LPMID	CLR	CYCNT
0885 f570 b7 e4 5b           [ 5 ] 	STAA	CYCNT+1		ESTABLISH BIT-TIME COUNT
0886 f573 7f e4 5c           [ 6 ] 	CLR	GOOD1S		INIT LOGIC SENSE
0887 f576 86 0a              [ 2 ] LPIN	LDAA	#10		FIXED TIME (-1)= INIT COUNT
0888 f578 4c                 [ 2 ] LOOP1	INCA			A-REG HOLDS DURATION COUNT
0889 f579 f6 e4 85           [ 4 ] SYNCIN	LDAB	PIACR		EDGE YET ?
0890 f57c 2a fa              [ 4 ] 	BPL	LOOP1		IF NOT; KEEP LOOKING
0891 f57e f6 e4 84           [ 4 ] 	LDAB	PIADP		CLEAR INTERRUP FLAG
0892 f581 7d f5 81           [ 6 ] 	TST	*		DELAY TO MAKE PASS TIME...
0893 f584 01                 [ 2 ] 	NOP			EVEN MULTIPLE OF LOOP TIME
0894 f585 81 34              [ 2 ] 	CMPA	#52		<1.4 SHORT ?
0895 f587 2d 05              [ 4 ] 	BLT	SHRT
0896 f589 7c e4 5c           [ 6 ] 	INC	GOOD1S
0897 f58c 20 05              [ 4 ] 	BRA	WITHIN
0898 f58e 7a e4 5c           [ 6 ] SHRT	DEC	GOOD1S		GOOD1S POS MEANS 0
0899 f591 20 00              [ 4 ] 	BRA	WITHIN		DELAY
0900 f593 f6 e4 5a           [ 4 ] WITHIN	LDAB	CYCNT		HIGH BYTE
0901 f596 bb e4 5b           [ 4 ] 	ADDA	CYCNT+1		ADD CURRENT TO BIT-TIME COUNT
0902 f599 b7 e4 5b           [ 5 ] 	STAA	CYCNT+1		UPDATE
0903 f59c c9 00              [ 2 ] 	ADCB	#0		ADD IN CARRY
0904 f59e f7 e4 5a           [ 5 ] 	STAB	CYCNT		UPDATE HIGH BYTE
0905 f5a1 26 03              [ 4 ] 	BNE	CHKOVR		IF CARRY; BIT MAY BE OVER
0906 f5a3 01                 [ 2 ] 	NOP			DELAY
907: symbol Undefined on pass 2
907: Branch out of Range
0907 f5a4 20 fe              [ 4 ] 	BRA	NOTOVR		BIT NOT OVER
0908 f5a6 81 17              [ 2 ] CHKOVR	CMPA	#23		(279-245)
909: symbol Undefined on pass 2
909: Branch out of Range
0909 f5a8 2c fe              [ 4 ] 	BGE	BITOVR		BIT-TIME EXPIRED
0910 f5aa c6 05              [ 2 ] NOTOVER	LDAB	#5		[38]
0911 f5ac 5a                 [ 2 ] 	DECB			*
0912 f5ad 2a fd              [ 4 ] 	BPL	*-1		*
0913 f5af 7e f5 b2           [ 3 ] 	JMP	*+3		
0914 f5b2 20 c2              [ 4 ] 	BRA	LPIN
0915                               *
0916                               * END OF BIT TIME
0917                               *
0918 f5b4 78 e4 5c           [ 6 ] BITOVER	ASL	GOOD1S		LOGIC SENSE TO CARRY
0919 f5b7 76 e4 59           [ 6 ] 	ROR	BYTE		SHIFT NEW BIT INTO BYTE
0920 f5ba 24 08              [ 4 ] 	BCC	TINDUN		DONE WHEN START FALLS OUT
0921 f5bc 81 5d              [ 2 ] 	CMPA	#93		>2.5 NOM. SHORTS ?
0922 f5be 2d a9              [ 4 ] 	BLT	LPOUT		NO; BIT-TIM STARTS AT 0
0923 f5c0 86 24              [ 2 ] 	LDAA	#36		YES; TRY MAINTAIN FRAMING
0924 f5c2 20 a9              [ 4 ] 	BRA	LPMID		NEXT BIT-TIME
0925                               *
0926                               * DATA BYTE READ; CLEAN-UP AND LEAVE
0927                               *
0928 f5c4 b6 e4 59           [ 4 ] TINDUN	LDAA	BYTE		GET CURRENT BYTE
0929 f5c7 bb e4 5e           [ 4 ] 	ADDA	CHKSM		ADD TO CHECKSUM
0930 f5ca b7 e4 5e           [ 5 ] 	STAA	CHKSM		UPDATE
0931 f5cd b6 e4 59           [ 4 ] 	LDAA	BYTE		GET RECEIVED BYTE IN A-REG
0932 f5d0 39                 [ 5 ] 	RTS			** RETURN **
0933                               ******************************************
0934                               * BIT1 - SEND A LOGIC 1 BIT-TIME
0935                               *        LESS 177 CLOCK CYCLES
0936                               *           TIME TUNNED
0937                               ******************************************
0938                               *				FOR BSR
0939 f5d1 c6 0f              [ 2 ] BIT1	LDAB	#15		# SHORT H-CYCS (-1)
0940 f5d3 bd f5 ff           [ 9 ] LOOPB1	JSR	INVRT		[20/51] TRANSMIT EDGE
0941 f5d6 86 18              [ 2 ] 	LDAA	#24		[152] 2 DELAY
0942 f5d8 4a                 [ 2 ] 	DECA			" 2
0943 f5d9 2a fd              [ 4 ] 	BPL	*-1		" 4
0944 f5db 20 00              [ 4 ] 	BRA	*+2		4 DELAY
0945 f5dd 5a                 [ 2 ] 	DECB			2 1 LESS HALF CYCLE
0946 f5de 26 f3              [ 4 ] 	BNE	LOOPB1		4 TILL 2ND EDGE
0947 f5e0 bd f5 ff           [ 9 ] 	JSR	INVRT		[20/51] 15TH EDGE IN BIT-TIME
0948 f5e3 39                 [ 5 ] 	RTS			5 ** RETURN ** 177 CYC TO NXT
0949                               ******************************************
0950                               * BITO - SEND A LOGIC O BIT-TIME
0951                               *        LESS 177 CLOCK CYCLES
0952                               *           TIME TUNNED
0953                               ******************************************
0954                               *				FOR BSR
0955 f5e4 c6 07              [ 2 ] BITO	LDAB	#7		2 LONG H-CYCS (-1)
0956 f5e6 bd f5 ff           [ 9 ] LOOPB0	JSR	INVRT		[20/5] TRANSMIT EDGE
0957 f5e9 86 38              [ 2 ] 	LDAA	#56		[344] 2 DELAY
0958 f5eb 4a                 [ 2 ] 	DECA			" 2
0959 f5ec 2a fd              [ 4 ] 	BPL	*-1		" 4
0960 f5ee 01                 [ 2 ] 	NOP			2 DELAY
0961 f5ef 5a                 [ 2 ] 	DECB			2 1 LESS TO GO
962: symbol Undefined on pass 2
962: Branch out of Range
0962 f5f0 26 fe              [ 4 ] 	BNE	LOOP0		4 TILL 2ND LAST EDGE
0963 f5f2 bd f5 ff           [ 9 ] 	JSR	INVRT		[20/5] 7TH EDGE IN BIT-TIME
0964 f5f5 86 1d              [ 2 ] 	LDAA	#29		[182] 2 DELAY
0965 f5f7 4a                 [ 2 ] 	DECA			" 2
0966 f5f8 2a fd              [ 4 ] 	BPL	*-1		" 4
0967 f5fa 7e f5 fd           [ 3 ] 	JMP	*+3		3 DELAY
0968 f5fd 01                 [ 2 ] 	NOP			3 *
0969 f5fe 39                 [ 5 ] 	RTS			5 ** RETURN ** 177 CYC TO NXT
0970                               ******************************************
0971                               * INVRT - ROUTINE TO TRANSMIT A RISING
0972                               *         OR FALLING EDGE TO THE CASSETTE
0973                               *             TIME TUNNED
0974                               ******************************************
0975                               *				FOR JSR
0976 f5ff 86 80              [ 2 ] INVRT	LDAA	#$80		2
977: symbol Undefined on pass 2
0977 f601 b8 00 00           [ 4 ] 	EORA	PIADPB		4
978: symbol Undefined on pass 2
0978 f604 b7 00 00           [ 5 ] 	STAA	PIADPB		5 INVERT OUTPUT
0979 f607 39                 [ 5 ] 	RTS			5 ** RETURN **
0980                               ******************************************
0981                               * PNCHB - PUNCH 1 BITE TO TAPE, INCLUDES
0982                               *         START BIT, DATA, AND ALL BUT LAST HALF-CYCLE
0983                               *         OF STOP BITS
0984                               *                    TIME TUNNED
0985                               ******************************************
0986                               *				9 FOR JSR
0987 f608 b7 e4 59           [ 5 ] PNCHB	STAA	BYTE		5 SAVE BYTE TO PUNCH
988: symbol Undefined on pass 2
988: Branch out of Range
0988 f60b 8d fe              [ 8 ] 	BSR	BIT0		[30/<177>] SEND START BIT
0989 f60d 86 09              [ 2 ] 	LDAA	#9		2 # BITS IN BYTE (+2 STOP) (-1)
0990 f60f b7 e4 5f           [ 5 ] 	STAA	NBITS		5 ESTABLISH BIT COUNT
0991 f612 7d f6 12           [ 6 ] 	TST	*		6 DELAY
0992 f615 86 13              [ 2 ] LPPOUT	LDAA	#19		[122] 2 DELAY
0993 f617 4a                 [ 2 ] 	DECA			" 2
0994 f618 2a fd              [ 4 ] 	BPL	*-1		" 4
0995 f61a 0d                 [ 2 ] 	SEC			2 SO LAST 2 BIT TIMES = 1 'S
0996 f61b 76 e4 59           [ 6 ] 	ROR	BYTE		6 LOGIC SENSE TO CARRY
0997 f61e 25 05              [ 4 ] 	BCS	DO1		4 IF LOGIC 1
998: symbol Undefined on pass 2
998: Branch out of Range
0998 f620 8d fe              [ 8 ] 	BSR	BIT0		[30/<177>] XMIT A 0 BIT-TIME
0999 f622 7e f6 2a           [ 3 ] 	JMP	ENDBIT		3
1000 f625 8d aa              [ 8 ] DO1	BSR	BIT1		[30/<177>] XMIT A 1 BIT-TIME
1001 f627 7e f6 2a           [ 3 ] 	JMP	ENDBIT		3 MATCHING DELAY
1002 f62a 7a e4 5f           [ 6 ] ENDBIT	DEC	NBITS		6 1 LESS BIT-TIME TO GO
1003 f62d 2a e6              [ 4 ] 	BPL	LPPOUT		4 CONTINUE FOR BYTE+STOP BITS
1004 f62f 39                 [ 5 ] 	RTS			5 ** RETURN ** 159 CYC TO NXT
1005                               ******************************************
1006                               * PUNCH - FORMAT AND PUNCH A CASSETE DATA FILE
1007                               *         INCLUDING LEADER AND CHECKSUM
1008                               *             EXECUTION TIME TUNNED
1009                               *
1010                               ******************************************
1011                               *                                 9 FOR JSR
1012 f630 ce 03 48           [ 3 ] PUNCH	LDX	#840		3 COUNT FOR 30-SEC LEADER
1013 f633 86 ff              [ 2 ] LLOOP	LDAA	#$FF		2 LEADER CHARACTER
1014 f635 c6 10              [ 2 ] 	LDAB	#16		[104] 2 DELAY
1015 f637 5a                 [ 2 ] 	DECB			* 2
1016 f638 2a fd              [ 4 ] 	BPL	*-1		* 4
1017 f63a bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH A LEADER CHAR
1018 f63d 09                 [ 4 ] 	DEX			4
1019 f63e 26 f3              [ 4 ] 	BNE	LLOOP		4 CONTINUE FOR 30-SEC
1020                               *
1021                               * LEADER FINISHED
1022                               *
1023 f640 86 53              [ 2 ] 	LDAA	#'S		2 BLOCH START CHAR
1024 f642 c6 10              [ 2 ] 	LDAB	#16		[104] 2 DELAY
1025 f644 5a                 [ 2 ] 	DECB			* 2
1026 f645 2a fd              [ 4 ] 	BPL	*-1		* 4
1027 f647 bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH START CHAR
1028 f64a 01                 [ 2 ] 	NOP			2 DELAY
1029 f64b 7f e4 5e           [ 6 ] 	CLR	CHKSM		6 INITIALIZE CHECKSUM
1030 f64e ce e4 60           [ 3 ] 	LDX	#BEGAD		3 POINTAT FIRST ADDR BYTE0LT
1031 f651 a6 00              [ 5 ] ADLOOP	LDAA	0,X
1032 f653 16                 [ 2 ] 	TAB			2 EXTRACOPY
1033 f654 fb e4 5e           [ 4 ] 	ADDB	CHKSM		4 ADDR IS PART OF CHECKSUM
1034: symbol Undefined on pass 2
1034 f657 f7 00 00           [ 5 ] 	STAB	CHKSUM		5 UPDATE
1035 f65a 01                 [ 2 ] 	NOP			2 DELAY
1036 f65b c6 0d              [ 2 ] 	LDAB	#13		[86] 2
1037 f65d 5a                 [ 2 ] 	DECB			* 2
1038 f65e 2a fd              [ 4 ] 	BPL	*-1		* 4
1039 f660 bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH ADDR BYTE
1040 f663 08                 [ 4 ] 	INX			4 ADV TO NEXT ADDR BYTE
1041 f664 8c e4 64           [ 3 ] 	CPX	#BEGAD+4	3 DONE YET ?
1042 f667 26 e8              [ 4 ] 	BNE	ADLOOP		4 CONTINUE FOR 4 ADDR CHARS
1043                               *
1044                               * READY TO PUNCH DATA
1045                               *
1046 f669 01                 [ 2 ] 	NOP			2 DELAY
1047 f66a 01                 [ 2 ] 	NOP			2 DELAY
1048 f66b fe e4 60           [ 5 ] 	LDX	BEGAD		5 GET BEG ADDR OF DATA
1049 f66e a6 00              [ 5 ] DLOOP	LDAA	0,X		5 GET A DATA BYTE
1050 f670 16                 [ 2 ] 	TAB			2 EXTRA COPY
1051: symbol Undefined on pass 2
1051 f671 fb 00 00           [ 4 ] 	ADDB	CHKSUM		4 ADD TO CHKSUM
1052: symbol Undefined on pass 2
1052 f674 f7 00 00           [ 5 ] 	STAB	CHKSUM		5 UPDATE
1053: symbol Undefined on pass 2
1053 f677 f7 00 00           [ 5 ] 	STAB	CHKSUM		5 DELAY
1054 f67a c6 0b              [ 2 ] 	LDAB	#11		[74] 2
1055 f67c 5a                 [ 2 ] 	DECB			* 2
1056 f67d 2a fd              [ 4 ] 	BPL	*-1		* 4
1057 f67f bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH DATA BYTE
1058 f682 7e f6 85           [ 3 ] 	JMP	*+3		3 DELAY
1059 f685 bc e4 62           [ 5 ] 	CPX	ENDAD		5 SEE IF DONE
1060 f688 27 03              [ 4 ] 	BEQ	DUNDAT		1 IF FINISHED
1061 f68a 08                 [ 4 ] 	INX			4 ELSE ADV TO NXT
1062 f68b 20 e1              [ 4 ] 	BRA	DLOOP		4 AND CONTINUE LOOP
1063                               *
1064                               * READY TO PUNCH CHECKSUM
1065                               *
1066 f68d 70 e4 5e           [ 6 ] DUNDAT	NEG	CHKSM		6 SUM INCL, CHECK WILL BE 0
1067 f690 b6 e4 5e           [ 4 ] 	LDAA	CHKSM		4 PREPARE TO SEND
1068 f693 c6 14              [ 2 ] 	LDAB	#20		[128] 2
1069 f695 5a                 [ 2 ] 	DECB			* 2
1070 f696 2a fd              [ 4 ] 	BPL	*-1		* 4
1071 f698 bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH CHECKSUM
1072 f69b 39                 [ 5 ] 	RTS			5 ** RETURN **
1073                               ******************************************
1074                               *
1075                               * LOAD - LOAD OR VERIFY A DATA FILE FROM
1076                               *        CASSETTE TAPE
1077                               *
1078                               ******************************************
1079                               *				9 FOR A JSR
1080 f69c bd f5 33           [ 9 ] LOAD	JSR	TIN		[56/101+-5] READ A BYTE FROM TAPE
1081 f69f 81 53              [ 2 ] 	CMPA	#'S		2 BLOCK START ?
1082 f6a1 26 f9              [ 4 ] 	BNE	LOAD		4 NO; TRY AGAIN
1083                               *
1084                               * BLOCK START FOUND; NOW READ BEG & END ADDR AREA
1085                               *
1086 f6a3 ce e4 60           [ 3 ] 	LDX	#BEGAD		3 POINT AR ADDR AREA
1087 f6a6 7f e4 5e           [ 6 ] 	CLR	CHKSM		6 INITIALIZE CHECKSUM
1088 f6a9 bd f5 33           [ 9 ] LOPAD	JSR	TIN		[56/101+-5] GET ADDR CHAR
1089 f6ac a7 00              [ 6 ] 	STAA	0,X		6 STORE RECIEVED ADDR CHAR
1090 f6ae 08                 [ 4 ] 	INX			4 POINT AT NEXT ADDR LOC
1091 f6af 8c e4 64           [ 3 ] 	CPX	#BEGAD+4	3 DONE GETTING ADDR'S ?
1092 f6b2 26 f5              [ 4 ] 	BNE	LOPAD		4 NO; CONTINUE
1093                               *
1094                               * READY TO READ DATA
1095                               *
1096 f6b4 fe e4 60           [ 5 ] 	LDX	BEGAD		5 POINT TO WHERE DATA GOES
1097 f6b7 bd f5 33           [ 9 ] LOPDAT	JSR	TIN		[56/101+-5] GET DATA FROM TAPE
1098 f6ba 7d e4 3e           [ 6 ] 	TST	FNCFL		6 SEE IF LOAD OR VERF ?
1099 f6bd 27 04              [ 4 ] 	BEQ	VERF		4 IF NOT SET; IT'S VERF
1100 f6bf a7 00              [ 6 ] 	STAA	0,X		6 IT'S LOAD SO STORE DATA
1101 f6c1 20 04              [ 4 ] 	BRA	LOPBOT		4 GO TO BOTTOM OF LOOP
1102 f6c3 a1 00              [ 5 ] VERF	CMPA	0,X		5 JUST COMPARE TO MEM
1103 f6c5 26 11              [ 4 ] 	BNE	BAD		4 IF NON-COMPARE; SIGNAL ERROR
1104 f6c7 bc e4 62           [ 5 ] LOPBOT	CPX	ENDAD		5 DONE ?
1105 f6ca 27 03              [ 4 ] 	BEQ	CHKCHK		4 IF SO; CHECK CHECKSUM
1106 f6cc 08                 [ 4 ] 	INX			4 POINT AT NEXT DATA LOC
1107 f6cd 20 e8              [ 4 ] 	BRA	LOPDAT		4 AND CONTINUE LOAD/VRFY
1108                               *
1109                               * DATA FINISHED... NOW CHECK CHECSUM
1110                               *
1111 f6cf bd f5 33           [ 9 ] CHKCHK	JSR	TIN		[56/105+-5] GET CHECKSUM
1112 f6d2 7d e4 5e           [ 6 ] 	TST	CHKSM
1113 f6d5 26 01              [ 4 ] 	BNE	BAD		4 IF NOT ZERO; BAD CHECKSUM
1114 f6d7 39                 [ 5 ] 	RTS			5 ** RETURN **
1115                               *
1116 f6d8 ff e4 34           [ 6 ] BAD	STX	UX		6 S0 USER CAN SEE END ADDR
1117 f6db b7 e4 33           [ 5 ] 	STAA	UA		5 S0 USER CAN CHECK IT
1118 f6de 7d e4 3e           [ 6 ] 	TST	FNCFL		CHECK FOR ERROR	OVERRIDE
1119 f6e1 2a 01              [ 4 ] 	BPL	STOP
1120 f6e3 39                 [ 5 ] 	RTS			** RETURN ** NO MESSAGE
1121                               *
1122 f6e4 ce 71 77           [ 3 ] STOP	LDX	#$7177		"FA"
1123 f6e7 ff e4 1d           [ 6 ] 	STX	DISBUF
1124 f6ea ce 06 38           [ 3 ] 	LDX	#$0638		"IL"
1125: symbol Undefined on pass 2
1125 f6ed ff 00 02           [ 6 ] 	STX	DIDBUF+2
1126 f6f0 7e f7 35           [ 3 ] 	JMP	ALTBAD		PRINT "FAIL ??"
1127                               ******************************************
1128                               *
1129                               * GO - GOT TO USER PROGRAM
1130                               *
1131                               ******************************************
1132 f6f3 7d e4 23           [ 6 ] GO	TST	ROLPAS		HEX DATA PRIOR TO 'GO'
1133 f6f6 26 06              [ 4 ] 	BNE	CONTIN		IF NOT; ASSUME UPC
1134 f6f8 fe e4 2c           [ 5 ] 	LDX	HEXBUF		GET ENTERED VALUE
1135 f6fb ff e4 36           [ 6 ] 	STX	UPC		STORE AS GO ADDR
1136 f6fe ce f7 0b           [ 3 ] CONTIN	LDX	#GO1		RETURN ADDR AFTER ROI
1137 f701 ff e4 39           [ 6 ] ROI	STX	ROIBAK		SAVE IN RAM
1138 f704 86 01              [ 2 ] 	LDAA	#1
1139 f706 b7 e4 38           [ 5 ] 	STAA	ROIFLG		SIGNAL SINGLE TRACE
1140 f709 20 03              [ 4 ] 	BRA	GOTO		EXIT (NO BREAKS)
1141                               * COME HERE AFTER RUNNING ONE INSTRUCTION
1142 f70b bd f4 5f           [ 9 ] GO1	JSR	INBKS		INSTALL BREAKPOINTS
1143 f70e be e4 2f           [ 5 ] GOTO	LDS	USP		GET USER'S STACK POINTER
1144 f711 86 55              [ 2 ] 	LDAA	#$55		START TEST FOR EXISTANCE OF STK
1145 f713 36                 [ 4 ] 	PSHA
1146 f714 32                 [ 4 ] 	PULA
1147 f715 81 55              [ 2 ] 	CMPA	#$55		DID IT GO ?
1148 f717 26 10              [ 4 ] 	BNE	BADSTK		NO. STACK IS BAD
1149 f719 b6 e4 37           [ 4 ] 	LDAA	UPC+1		LOW BYTE
1150 f71c 36                 [ 4 ] 	PSHA			STACK FOR RTS
1151 f71d b6 e4 36           [ 4 ] 	LDAA	UPC		HIGH BYTE
1152 f720 36                 [ 4 ] 	PSHA	
1153 f721 86 aa              [ 2 ] 	LDAA	#$AA		SEE IF STACK STILL OK
1154 f723 36                 [ 4 ] 	PSHA
1155 f724 32                 [ 4 ] 	PULA
1156 f725 81 aa              [ 2 ] 	CMPA	#$AA
1157 f727 27 1e              [ 4 ] 	BEQ	GOEXIT		OK; FINAL EXIT SEQ
1158 f729 ce 40 6d           [ 3 ] BADSTK	LDX	#$406D		MESSAGE *-DP- ??* TO 7-SEG
1159 f72c ff e4 1d           [ 6 ] 	STX	DISBUF
1160 f72f ce 73 40           [ 3 ] 	LDX	#$7340
1161 f732 ff e4 1f           [ 6 ] 	STX	DISBUF+2
1162 f735 ce 53 53           [ 3 ] ALTBAD	LDX	#$5353
1163 f738 ff e4 21           [ 6 ] 	STX	DISBUF+4
1164 f73b 8e e4 7e           [ 3 ] 	LDS	#STKTOP		INIT TO GOOD AREA
1165 f73e ce f0 a2           [ 3 ] 	LDX	#DIDDLE		DO-NOTHING SUB
1166 f741 ff e4 19           [ 6 ] 	STX	MNPTR		STORE AS MAIN PROG
1167 f744 7e f0 bb           [ 3 ] 	JMP	PUT		ONLY ESCAPE IS RESET OR 'EX'
1168                               *
1169 f747 fe e4 34           [ 5 ] GOEXIT	LDX	UX		RECOVER USER STATUS
1170 f74a f6 e4 32           [ 4 ] 	LDAB	UB
1171 f74d b6 e4 33           [ 4 ] 	LDAA	UA
1172 f750 36                 [ 4 ] 	PSHA			TEMP SAVE ON USER STACK
1173 f751 86 01              [ 2 ] 	LDAA	#1
1174 f753 b7 e4 3b           [ 5 ] 	STAA	UPROG		FLAG SIGNALS IN USER PROG
1175 f756 7d e4 38           [ 6 ] 	TST	ROIFLG		TRACE EXIT ?
1176 f759 27 12              [ 4 ] 	BEQ	ABSOUT		IF NOT;; JUST GET GOING
1177 f75b 86 3c              [ 2 ] 	LDAA	#$3C
1178 f75d b7 e4 85           [ 5 ] 	STAA	PIACRA		HOLDS TRACE COUNTER RESET
1179 f760 b6 e4 86           [ 4 ] 	LDAA	PIAPB		READ TO CLEAR ANY INT FLAG
1180 f763 86 0e              [ 2 ] 	LDAA	#$0E
1181 f765 b7 e4 87           [ 5 ] 	STAA	PIACRB		ENABLE TRACE NMI
1182 f768 86 34              [ 2 ] 	LDAA	#$34
1183 f76a b7 e4 85           [ 5 ] 	STAA	PIACRA		RELEASE TIMER
1184 f76d b6 e4 31           [ 4 ] ABSOUT	LDAA	UCC		TIMED EXIT TO USER PROG
1185 f770 06                 [ 2 ] 	TAP			SET USER COND CODES
1186 f771 32                 [ 4 ] 	PULA			SET USER A-REG; DON'T MESS 'CC'
1187 f772 39                 [ 5 ] 	RTS			*** EXIT TO USER PROG ***
1188                               *
1189                               ******************************************
1190                               *
1191                               * INTERRUPTS - INTERRUPT HANDLING ROUTINES
1192                               *
1193                               ******************************************
1194 f773 01                 [ 2 ] NMINT	NOP			SET IRQ FLAG
1195 f774 0f                 [ 2 ] 	SEI			.
1196 f775 86 04              [ 2 ] 	LDAA	#$04		PIA DISABLE CODE
1197 f777 b7 e4 87           [ 5 ] 	STAA	PIACRB		DISABLE NMI'S DURIN SERVICE
1198 f77a b6 e4 87           [ 4 ] 	LDAA	PIACRB		READ INT STATUS
1199 f77d 2a 12              [ 4 ] 	BPL	SAVE		IF RETURN FROM TRACE
1200                               * KEY CLOSURE CAUSED NMI
1201 f77f bd f0 4e           [ 9 ] 	JSR	GET		FIND AND DEBOUNCE KEY
1202 f782 81 81              [ 2 ] 	CMPA	#$81		'EX' ?
1203 f784 27 03              [ 4 ] 	BEQ	ABORT
1204: symbol Undefined on pass 2
1204: Branch out of Range
1204 f786 8d fe              [ 8 ] 	BSR	ENMI		RE-ENABLE INTERRUPT
1205 f788 3b                 [10 ] 	RTI
1206                               * 'EX' KEY: PROMPT OR ABORT
1207 f789 7d e4 3b           [ 6 ] ABORT	TST	UPROG		ESCAPE FROM USER PROG ?
1208 f78c 26 03              [ 4 ] 	BNE	SAVE		IF ESCAPE FROM USER PROG
1209 f78e 7e f0 24           [ 3 ] 	JMP	PROMPT		*** ALREADY IN OPT-SYST ***
1210 f791 bf e4 2f           [ 6 ] SAVE	STS	USP		SAVE POINTER TO USER REGS
1211 f794 8e e4 7e           [ 3 ] 	LDS	#STKTOP		INIT TO SYST AREA
1212 f797 8d 23              [ 8 ] 	BSR	SVSTAT		RECOVER STATUS AT 'EX' TIME
1213 f799 8d 13              [ 8 ] 	BSR	ENNMI		RE-ENABLE KEY NMI
1214 f79b 7f e4 3b           [ 6 ] 	CLR	UPROG		SIGNAL NOT IN USER PROGRAM
1215 f79e 7d e4 38           [ 6 ] 	TST	ROIFLG		IS THIS RETURN FROM TRACE ?
1216 f7a1 27 08              [ 4 ] 	BEQ	NOTROI		IF NOT
1217 f7a3 7f e4 38           [ 6 ] 	CLR	ROIFLG		SIGNAL NOT ROI NOW
1218: symbol Undefined on pass 2
1218 f7a6 fe 00 00           [ 5 ] 	LDX	ROIBACK		GET RETURN ADDRESS
1219 f7a9 6e 00              [ 4 ] 	JMP	0,X		AND RETURN FROM ROI
1220 f7ab 7e f2 ca           [ 3 ] NOTROI	JMP	REGBEG		*** TO REG DISPLAY ***
1221                               *
1222                               *
1223 f7ae b6 e4 86           [ 4 ] ENNMI	LDAA	PIAPB		TO CLEAR FLAGS
1224 f7b1 86 07              [ 2 ] 	LDAA	#$07		ENABLE KEY INTERRUPT FLAGS
1225 f7b3 b7 e4 87           [ 5 ] 	STAA	PIACRB		TO PIA CONTROL REGISTER
1226 f7b6 86 ff              [ 2 ] 	LDAA	#$FF	
1227 f7b8 b7 e4 86           [ 5 ] 	STAA	PIAPB		ENABLE ALL KEY ROWS
1228 f7bb 39                 [ 5 ] 	RTS			** RETURN ** 		
1229                               *
1230                               *
1231 f7bc be e4 2f           [ 5 ] SVSTAT	LDS	USP		POINT AT STACKED STATUS
1232 f7bf ce e4 31           [ 3 ] 	LDX	#UCC		POINT AT PSEUDO REG AREA
1233 f7c2 32                 [ 4 ] SVLOOP	PULA			GET STACKED BYTE
1234 f7c3 a7 00              [ 6 ] 	STAA	,X		STORE AT PSEUDO REG RAM LOC
1235 f7c5 08                 [ 4 ] 	INX			POINT AT NEXT REG LOC
1236 f7c6 8c e4 38           [ 3 ] 	CPX	#UPC+2		PAST END ?
1237 f7c9 26 f7              [ 4 ] 	BNE	SVLOOP		IF NOT CONTINUE LOOP
1238 f7cb bf e4 2f           [ 6 ] 	STS	USP		SAVE USER SP AT AT INTERRUPT TIME
1239 f7ce 8e e4 7c           [ 3 ] 	LDS	#STKTOP-2	SET FOR RETURN
1240 f7d1 39                 [ 5 ] 	RTS			** RETURN **
1241                               *
1242                               *
1243 f7d2 01                 [ 2 ] SWINT	NOP			SET IRQ FLAG
1244 f7d3 0f                 [ 2 ] 	SEI			.
1245 f7d4 bf e4 2f           [ 6 ] 	STS	USP		POINTER TO USER'S REGS
1246 f7d7 8e e4 7e           [ 3 ] 	LDS	#STKTOP		INIT TO SYST AREA
1247: symbol Undefined on pass 2
1247: Branch out of Range
1247 f7da 8d fe              [ 8 ] 	BSR	SYSTAT		RECOVER BREAK STATUS
1248 f7dc fe e4 36           [ 5 ] 	LDX	UPC		BACK PROG CNTR
1249 f7df 09                 [ 4 ] 	DEX			.
1250 f7e0 ff e4 36           [ 6 ] 	STX	UPC		.
1251 f7e3 bd f4 85           [ 9 ] 	JSR	OUTBKS		TAKE OUT BREAKPOINTS
1252 f7e6 7f e4 3b           [ 6 ] 	CLR	UPROG		SIGNAL NOT IN-USER PROG
1253 f7e9 7e f2 ca           [ 3 ] 	JMP	REGBEG		*** TO REG DISPLAY ***
1254                               *
1255                               *
1256 f7ec fe e4 3c           [ 5 ] UIRQ	LDX	UIRQV		GET USER IRQ VECTOR
1257 f7ef 6e 00              [ 4 ] 	JMP	0,X		*** GO TO USER SERVICE ROUTINE ***
1258                               *
1259                               ******************************************
1260                               *
1261 e419                          	ORG	$E419
1262                               *
1263                               * DEFS - DEFINITIONS AND SCRATCH LOCATIONS
1264                               *
1265                               ******************************************
1266 e419                          MNPTR	RMB	2		POINTER TO ACTIVE SUBROUTINE
1267 e41b                          KEY	RMB	1		KEY DATA
1268 e41c                          KYFLG	RMB	1		KEY PENDING FLAG
1269 e41d                          DISBUF	RMB	6		DISPLAY BUFFER
1270 e423                          ROLPAS	RMB	1		FIRST PASS OF DATA ROL-ENT
1271 e424                          XSAVD	RMB	2		X SCRATCH
1272 e426                          XSAV1	RMB	2		.
1273 e428                          XTMP1	RMB	2		.
1274 e42a                          MEMSAV	RMB	2		SAVE MEM POINTER DURING OFFSET CALL
1275 e42c                          HEXBUF	RMB	3		HEX INPUT BUFFER
1276 e42f                          USP	RMB	2		USER STACK POINTER
1277 e431                          UCC	RMB	1		USER CONDITION CODE
1278 e432                          UB	RMB	1		USER B REGISTER
1279 e433                          UA	RMB	1		USER A REGISTER
1280 e434                          UX	RMB	2		USER x REGISTER
1281 e436                          UPC	RMB	2		USER PROGRAM COUNTER
1282 e438                          ROIFLG	RMB	1		RUN-ONE-INSTRUCTION FLAG
1283 e439                          ROIBAK	RMB	2		ADDRESS TO RETURN AFTER ROI
1284 e43b                          UPROG	RMB	1		FLAG INDICATE IN-USER-PROG
1285 e43c                          UIRQV	RMB	2		ADDR OF USER'S IRQ SERVICE ROUTINE
1286 e43e                          FNCFL	RMB	1		SPECIAL FUNCTION FLAG
1287 e43f                          FNCPNT	RMB	2		POINT TO USER'S SPECIAL FUNCTION
1288 e441                          REGNO	RMB	1		REGISTER NUMBER (USED IN REGDIS)
1289 e442                          BKPNTR	RMB	2		POINTS TO BREAKPOINT TABLE
1290 e444                          BRKNO	RMB	1		# OF BREAKPOINTS IN TABLE
1291 e445                          BRKTAB	RMB	20		BREAKPOINT TABLE
1292 e459                          BRKEND	EQU	*		END OF TABLE 
1293                               *
1294                               * CASSETTE INTERFACE SCRATCH LOCATION
1295                               *
1296 e459                          BYTE	RMB	1		DATA BUFFER
1297 e45a                          CYCNT	RMB	2		CYCLE COUNT REG
1298 e45c                          GOOD1S	RMB	1		# NUMBER OF GOOD 1'S
1299 e45d                          OLD	RMB	1
1300 e45e                          CHKSM	RMB	1		CHECKSUM REG
1301 e45f                          NBITS	RMB	1		
1302 e460                          BEGAD	RMB	2		BEGGINING ADDRESS
1303 e462                          ENDAD	RMB	2		END ADDRESS
1304                               *
1305 e484                          PIA	EQU	$E484		SYSTEM PIA BASE ADDRESS
1306 0000                          KPCOL	EQU	$0		KEYPAD COL PORT OFFSET
1307 0002                          KPROW	EQU	$2		KEYPAD ROW PORT	OFFSET
1308 e484                          ANOD	EQU	$E484		DISPLAY SEG ANODES
1309 e486                          CATG	EQU	$E486		DISPLAY CATHODES
1310 e486                          PIAROW	EQU	$E486		EXTENDED MODE ROW PORT ADDR
1311 e486                          PIAPDB	EQU	$E486		PIA DATA PORT B
1312 e485                          PIACR	EQU	$E485		PIA CONTROL REG A
1313 e484                          PIADP	EQU	$E484		PIA DATA PORT A
1314 e485                          PIACRA	EQU	$E485		PIA CONTROL REG A
1315 e487                          PIACRB	EQU	$E487		PIA CONTROL REG B
1316 e486                          PIAPB	EQU	$E486		PIA DATA PORT B
1317 e47e                          STKTOP	EQU	$E47E		TOP OF SYSTEM STACK
1318                               *
1319                               * SYSTEM VECTORS
1320                               *
1321                               * ON MEK6802D5 EITHER UPPER HALF
1322                               * OF D5BUG ($F400-F7FF) MUST "MIRROR"
1323                               * INTO ADDRESSES ($FC00-FFFF) OR
1324                               * ELSE USER MUST SUPPLY PROM
1325                               * MAPPED IN ($FC00-FFFF) AREA WHICH 
1326                               * CONTAINS ALTERNATE VECTORS.
1327                               * IN THE CASE OF "MIRRORING" THE
1328                               * FOLLOWING VECTORS WOULD ALSO 
1329                               * APPEAR AT THE NORMAL 6802
1330                               * VECTOR LOCATIONS ($FFF8-FFFF)
1331 f7f8                          	ORG	$F7F8
1332 f7f8 f7 ec                    	FDB	UIRQ		USER IRQ VECTOR
1333 f7fa f7 d2                    	FDB	SWINT		SOFTWARE INTERRUPT VECTOR
1334 f7fc f7 73                    	FDB	NMINT		NON MASKABLE INTERRUPT VECTOR
1335 f7fe f0 00                    	FDB	RESET		RESTART VECTOR
1336                               	END
1337                               ******************************************
ABORT      f789 *1207 1203 
ABSOUT     f76d *1184 1176 
ADDAX      f183 *0310 0126 0223 0264 0539 
ADLOOP     f651 *1031 1042 
ALTBAD     f735 *1162 1126 
ANOD       e484 *1308 0183 0187 
ARNCL2     f1bc *0338 0334 
ARNCL4     f1dd *0356 0351 
ARNCLR     f1a0 *0325 0323 
ARND       f191 *0315 0313 
ARNINC     f243 *0412 0410 
ARNR1      f30a *0516 0514 
ARNR2      f31c *0526 0524 
ARNR3      f365 *0561 0557 
ASNOW      f4f2 *0814 0811 
BACK       f3e3 *0635 0621 
BAD        f6d8 *1116 1103 1113 
BADCAL     f281 *0443 0432 
BADOFF     f257 *0422 0413 
BADSTK     f729 *1158 1148 
BEGAD      e460 *1302 0823 1030 1041 1048 1086 1091 1096 
BEGEND     f4ec *0810 0805 
BIT1       f5d1 *0939 1000 
BITO       f5e4 *0955 
BITOVER    f5b4 *0918 
BKFTMB     f42e *0678 
BKLOOP     f3cb *0623 0631 
BKLOP      f444 *0691 0701 
BKNO       f43e *0689 0647 
BKPNTR     e442 *1289 0622 0661 0680 0695 0716 0721 0740 0743 0775 
BKTOTB     f3f1 *0645 0610 
BRKBEG     f388 *0592 0234 
BRKEDT     f38e *0595 0593 
BRKEND     e459 *1292 0627 0700 0728 0749 0766 
BRKLOOP    f4a9 *0760 
BRKNO      e444 *1290 0619 0636 0648 0683 0689 0693 0710 
BRKPNT     f39c *0600 0595 
BRKTAB     e445 *1291 0629 0690 0712 0736 0759 
BRKTST     f3a2 *0603 0601 
BYTE       e459 *1296 0857 0919 0928 0931 0987 0996 
CALDUN     f26b *0431 0391 
CATG       e486 *1309 
CHKCHK     f6cf *1111 1105 
CHKOVR     f5a6 *0908 0905 
CHKSM      e45e *1300 0929 0930 1029 1033 1066 1067 1087 1112 
CKBKPT     f467 *0713 0729 
CKFC       f3b5 *0611 0609 
CKGO       f3bc *0614 0612 
CKLSB      f4b8 *0770 0761 
CLOP       f088 *0122 0123 
CLRDS      f195 *0320 0080 0216 0417 0426 0639 
CLRLOP     f005 *0051 0054 
CLRLP      f19b *0322 0327 
COLFND     f063 *0101 0097 
CONOUT     f509 *0824 0808 
CONTIN     f6fe *1136 1133 
CYCNT      e45a *1297 0858 0859 0884 0885 0900 0901 0902 0904 
DIDDLE     f0a2 *0132 1165 
DISBRKA    f3c0 *0619 
DISBUF     e41d *1269 0078 0176 0259 0321 0326 0397 0554 0556 0558 
                      0559 0785 1123 1159 1161 1163 
DISDUN     f3f0 *0640 0615 0637 
DLOOP      f66e *1049 1062 
DLY1       f171 *0299 0185 
DLY25      f169 *0296 0124 
DLYLP      f17c *0303 0298 0301 0304 
DLYX       f179 *0302 
DO1        f625 *1000 0997 
DOPCH      f515 *0829 0821 
DUNDAT     f68d *1066 1060 
DUNROW     f080 *0117 0114 
DYSCOD     f120 *0243 0214 0395 0415 0424 0479 0552 0607 0670 0827 
DYSOUT     f512 *0827 0817 
DYSTBL     f159 *0277 0262 
ENDAD      e462 *1303 0830 1059 1104 
ENDBIT     f62a *1002 0999 1001 
ENNMI      f7ae *1223 0083 1213 
FCLR       f4d1 *0792 0232 
FEDGE      f521 *0840 0861 0865 0869 
FNCFL      e43e *1286 0076 0211 0419 0428 0446 0465 0487 0489 0592 
                      0784 0800 1098 1118 
FNCPNT     e43f *1287 0218 
FNDBRK     f4a0 *0757 0645 0678 
FOUT       f4ca *0784 0794 
FULL       f428 *0671 0646 0650 0657 
FUNK       f4fc *0819 0815 
FUNKY      f105 *0221 0210 
FUNSEL     f0e5 *0205 0081 
GET        f04e *0091 0100 0111 1201 
GO         f6f3 *1132 0230 
GO1        f70b *1142 1136 
GOEXIT     f747 *1169 1157 
GOOD1S     e45c *1298 0860 0886 0896 0898 0918 
GOTO       f70e *1143 1140 
HASH       f108 *0222 0219 
HEXBUF     e42c *1275 0246 0257 0332 0353 0354 0362 0363 0380 0388 
                      0402 0404 0405 0406 0414 0423 0438 0477 0478 0548 0550 
                      0561 0563 0620 0634 0652 0663 0664 0669 0757 0758 0820 
                      0822 0824 0825 0826 0829 1134 
INBKS      f45f *0710 1142 
INVRT      f5ff *0976 0940 0947 0956 0963 
ISBKPT     f450 *0696 0694 
KEY        e41b *1267 0102 0105 0117 0119 0128 0370 
KEYNOW     f0eb *0209 0206 
KPCOL      0000 *1306 0093 0096 0107 0122 
KPROW      0002 *1307 0095 0106 
KYFLG      e41c *1268 0075 0130 0205 0369 0383 0501 0600 0810 
KYTBL      f0a3 *0144 0125 
LDTAP      f4dc *0802 0490 
LLOOP      f633 *1013 1019 
LOAD       f69c *1080 0802 1082 
LOOP1      f578 *0888 0890 
LOOPB0     f5e6 *0956 
LOOPB1     f5d3 *0940 0946 
LOOPF      f527 *0843 0845 
LOOPS      f552 *0868 0873 
LOPAD      f6a9 *1088 1092 
LOPBOT     f6c7 *1104 1101 
LOPDAT     f6b7 *1097 1107 
LP01       f128 *0247 0258 
LP02       f13e *0261 0270 
LP1P       f0bd *0176 0197 
LP2P       f0c1 *0178 0180 
LPCOL      f057 *0095 0099 
LPFND      f07a *0113 0116 
LPIN       f576 *0887 0914 
LPMID      f56d *0884 0883 0924 
LPOUT      f569 *0882 0922 
LPPOUT     f615 *0992 1003 
LPROW      f06a *0104 0110 
MEMBAK     f288 *0446 0435 0441 
MEMBEG     f1f6 *0377 0227 
MEMCH      f205 *0383 0377 
MEMNOW     f20b *0387 0384 
MEMOUT     f2bf *0476 0461 0471 
MEMSAV     e42a *1274 0407 0408 0433 0445 0467 
MNPTR      e419 *1266 0082 0190 0378 0492 0596 0806 1166 
NBITS      e45f *1301 0990 1002 
NEWMEM     f2ba *0473 0381 0447 0454 0459 
NEWREG     f31f *0527 0517 
NEXT       f4ad *0762 0771 0773 
NEXT1      f44d *0695 0692 
NEXT2      f47b *0724 0714 
NEXT3      f496 *0745 0738 
NMINT      f773 *1194 1334 
NOBPT      f484 *0730 0711 
NORMAL     f28d *0449 0390 
NOTEND     f3d7 *0630 0628 
NOTHEX     f3af *0608 0605 
NOTNEW     f350 *0552 0546 
NOTOVER    f5aa *0910 
NOTROI     f7ab *1220 1216 
NOTSH      f546 *0863 0867 
NOTVRF     f2d5 *0491 0488 
NUM        f2b5 *0470 0450 
NXM1       f297 *0456 0452 
NXM2       f29e *0460 0457 
NXR1       f30f *0519 0511 
OFFEND     f221 *0396 0468 
OFFOUT     f21e *0395 
OFFRET     f227 *0398 0401 0437 
OFFUN      f228 *0400 0393 
OLD        e45d *1299 0864 0868 0871 
ONLY1      f36a *0563 0560 
OUTBKS     f485 *0736 1251 
PCH        f4e2 *0805 0801 
PIA        e484 *1305 0091 
PIACR      e485 *1312 0844 0847 0889 
PIACRA     e485 *1314 1178 1183 
PIACRB     e487 *1315 1181 1197 1198 1225 
PIADP      e484 *1313 0841 0879 0891 
PIAPB      e486 *1316 1179 1223 1227 
PIAPDB     e486 *1311 
PIAROW     e486 *1310 0131 
PNCHB      f608 *0987 1017 1027 1039 1057 1071 
PROMPT     f024 *0070 0228 0803 0832 1209 
PSET       f4c5 *0782 
PUNCH      f630 *1012 0831 
PUT        f0bb *0175 0084 0198 0493 1167 
R2OUT      f1c4 *0342 0337 
R4OUT      f1ed *0366 0355 
RDKEY      f1ef *0369 0209 0387 0505 0603 0814 
REGBEG     f2ca *0487 0229 0532 1220 1253 
REGDIS     f2ee *0501 0491 
REGFNC     f2fe *0510 0506 
REGNO      e441 *1288 0496 0512 0516 0521 0526 0535 
REGNOW     f2f4 *0505 0502 
REGOUT     f32e *0535 0499 0508 0531 
REGTBL     f370 *0568 0538 
REMOV1     f488 *0737 0750 
RESET      f000 *0048 1335 
RO4LP      f1e3 *0361 0365 
ROI        f701 *1137 0533 
ROIBAK     e439 *1283 1137 
ROIFLG     e438 *1282 0074 1139 1175 1215 1217 
ROLL2      f1aa *0331 0470 
ROLL4      f1cc *0349 0213 0394 0507 0606 0816 
ROLPAS     e423 *1270 0072 0333 0335 0350 0352 0466 0474 0498 0528 
                      0545 0598 0672 0703 1132 
ROWFND     f079 *0112 0108 
RUNONE     f324 *0530 0520 
SAVE       f791 *1210 1199 1208 
SHRT       f58e *0898 0895 
STKTOP     e47e *1317 0070 0494 0495 1164 1211 1239 1246 
STOP       f6e4 *1122 1119 
SVLOOP     f7c2 *1233 1237 
SVSTAT     f7bc *1231 1212 
SWINT      f7d2 *1243 1333 
SYNCIN     f579 *0889 0881 
SYSFNC     f110 *0227 0221 
TAPEBEG    f4d7 *0800 
TIN        f533 *0856 1080 1088 1097 1111 
TINDUN     f5c4 *0928 0920 
UA         e433 *1279 0571 1117 1171 
UB         e432 *1278 0574 1170 
UCC        e431 *1277 0583 1184 1232 
UFNK       f100 *0218 0212 
UIRQ       f7ec *1256 1332 
UIRQV      e43c *1285 1256 
UPC        e436 *1281 0568 1135 1149 1151 1236 1248 1250 
UPROG      e43b *1284 0073 1174 1207 1214 1252 
USP        e42f *1276 0064 0580 1143 1210 1231 1238 1245 
UX         e434 *1280 0577 1116 1169 
VERF       f6c3 *1102 1099 
WITHIN     f593 *0900 0897 0899 
XSAV1      e426 *1272 0245 0320 0328 0331 0344 
XSAVD      e424 *1271 0296 0299 0302 0305 0310 0311 0312 0314 0315 
XTMP1      e428 *1273 0261 0266 
