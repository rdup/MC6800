0001                               * $Id: d5bug.asm,v 1.14 2021/07/20 01:10:57 rdup Exp rdup $
0002                               * $Log: d5bug.asm,v $
0003                               * Revision 1.14  2021/07/20 01:10:57  rdup
0004                               * Revision 1.0 of typing errors
0005                               *
0006                               * Revision 1.1  2021/07/07 06:04:21  rdup
0007                               * Initial revision
0008                               *
0009                               *RESET 
0010                               	NAM RESET
0011                               *	OPT CRET,LLN=80
0012 f000                          	ORG $F000
0013                               ******************************************
0014                               *
0015                               * RESET - COLD START ROUTINE
0016                               *
0017                               ****************************************** 
0018 f000 01                 [ 2 ] RESET	NOP 		SET INTERRUPT MASK
0019 f001 0f                 [ 2 ] 	SEI		.
0020 f002 ce e3 ff           [ 3 ] 	LDX	#$E3FF	CLEAR RAM
0021 f005 08                 [ 4 ] CLRLOP	INX		.
0022 f006 6f 00              [ 7 ] 	CLR	0,X	.
0023 f008 8c e4 87           [ 3 ] 	CPX	#$E487	.
0024 f00b 26 f8              [ 4 ] 	BNE	CLRLOP	.
0025 f00d ce e4 84           [ 3 ] 	LDX	#$E484	INITIALIZE SYSTEM PIA
0026 f010 86 7f              [ 2 ] 	LDAA	#$7F	.
0027 f012 a7 00              [ 6 ] 	STAA	0,X	.
0028 f014 86 ff              [ 2 ] 	LDAA	#$FF	.
0029 f016 a7 02              [ 6 ] 	STAA	2,X	.
0030 f018 86 06              [ 2 ] 	LDAA	#$06	.
0031 f01a a7 01              [ 6 ] 	STAA	1,X	.
0032 f01c a7 03              [ 6 ] 	STAA	3,X	.
0033 f01e ce e4 18           [ 3 ] 	LDX	#$E418	DEFAULT USER STACK
0034 f021 ff e4 2f           [ 6 ] 	STX	USP	.
0035                               ******************************************
0036                               *
0037                               * PROMPT - ROUTINE TO SET UP PROMPT CONDITIONS
0038                               *
0039                               ******************************************
0040 f024 8e e4 7e           [ 3 ] PROMPT	LDS	#STKTOP INIT SYSTEM STACK
0041 f027 86 01              [ 2 ] 	LDAA	#1      SET FIRST PASS
0042 f029 b7 e4 23           [ 5 ] 	STAA	ROLPAS  .
0043 f02c 7f e4 3b           [ 6 ] 	CLR	UPROG   INIT FLAGS
0044 f02f 7f e4 38           [ 6 ] 	CLR	ROIFLG  .
0045 f032 7f e4 1c           [ 6 ] 	CLR	KYFLG   .
0046 f035 7f e4 3e           [ 6 ] 	CLR	FNCFL   .
0047 f038 86 40              [ 2 ] 	LDAA	#$40    DISPLAY PROMPT
0048 f03a b7 e4 1d           [ 5 ] 	STAA	DISBUF  .
0049 f03d 86 1f              [ 2 ] 	LDAA	#%00011111 .
0050 f03f bd f1 95           [ 9 ] 	JSR	CLRDS   .
0051 f042 ce f0 e5           [ 3 ] 	LDX	#FUNSEL EXECUTE FUNCTION SELECT
0052 f045 ff e4 19           [ 6 ] 	STX	MNPTR   .
0053 f048 bd f7 ae           [ 9 ] 	JSR	ENNMI   ENABLE NMI
0054 f04b 7e f0 bb           [ 3 ] 	JMP	PUT	& GO
0055                               *
0056                               ******************************************
0057                               *
0058                               * GET ROUTINE TO READ A KEY
0059                               *
0060                               ******************************************
0061 f04e ce e4 84           [ 3 ] GET	LDX	#PIA	POINT AT PIA
0062 f051 86 ff              [ 2 ] 	LDAA	#$FF	.
0063 f053 a7 00              [ 6 ] 	STAA	KPCOL,X	TO TURN OFF DISPLAY
0064 f055 86 3f              [ 2 ] 	LDAA	#%00111111 COL 0, ALL ROWS
0065 f057 a7 02              [ 6 ] LPCOL	STAA	KPROW,X STORE INFO TO KEY MATRIX
0066 f059 6d 00              [ 7 ] 	TST	KPCOL,X	MSB IS MUX BIT
0067 f05b 2a 06              [ 4 ] 	BPL	COLFND	BIT-7 LOW MEANS COL FOUND
0068 f05d 8b 40              [ 2 ] 	ADDA	#$40	INC COL BITS TO MUX
0069 f05f 24 f6              [ 4 ] 	BCC	LPCOL	CONTINUE FOR ALL COLS
0070 f061 20 eb              [ 4 ] 	BRA	GET	KEY BOUNCED, START OVER
0071 f063 84 00              [ 2 ] COLFND	ANDA	#$11000000 MASK TO SAVE ONLY COL
0072 f065 b7 e4 1b           [ 5 ] 	STAA	KEY	WILL UPDATE LATER; JUST TEMP SAV
0073 f068 c6 00              [ 2 ] 	LDAB	#$00100000 ROW 5
0074 f06a 17                 [ 2 ] LPROW	TBA		COPY ROW INFO TO A-REG
0075 f06b ba e4 1b           [ 4 ] 	ORAA	KEY	COMBINE WITH COL INFO
0076 f06e a7 02              [ 6 ] 	STAA	KPROW,X	DRIVE KEY MATRIX
0077 f070 6d 00              [ 7 ] 	TST	KPCOL,X	MSB LOW = CLOSURE
0078 f072 2a 05              [ 4 ] 	BPL	ROWFND
0079 f074 54                 [ 2 ] 	LSRB		NEXT LOWER ROW BIT
0080 f075 26 f3              [ 4 ] 	BNE	LPROW	LOOP TILL ALL ROWS TRIED
0081 f077 20 d5              [ 4 ] 	BRA	GET	KEY BOUNCED, START OVER
0082 f079 4f                 [ 2 ] ROWFND	CLRA		PREPARE TO FIND BINARY ROW #
0083 f07a 54                 [ 2 ] LPFND	LSRB		LOOP BUILDS BINARY ROW #
0084 f07b 25 03              [ 4 ] 	BCS	DUNROW	WHEN BIT FALLS OFF; A-REG HAS #
0085 f07d 4c                 [ 2 ] 	INCA
0086 f07e 20 fa              [ 4 ] 	BRA	LPFND
0087 f080 79 e4 1b           [ 6 ] DUNROW	ROL	KEY
0088 f083 49                 [ 2 ] 	ROLA
0089 f084 79 e4 1b           [ 6 ] 	ROL	KEY
0090 f087 49                 [ 2 ] 	ROLA		A-REG IS 000RRRCC
0091                               * A-REG NOW CONTAINS OFFSET FOR KEY LOOK-UP
0092 f088 6d 00              [ 7 ] CLOP	TST	KPCOL,X	SEE IF KEY STILL DOWN
0093 f08a 2a fc              [ 4 ] 	BPL	CLOP	WAIT TILL LET UP
0094 f08c bd f1 69           [ 9 ] 	JSR	DLY25	DELAY TO DEBOUNCE
0095 f08f ce f0 a3           [ 3 ] 	LDX	#KYTBL	POINT AT TOP OF TABLE
0096 f092 bd f1 83           [ 9 ] 	JSR	ADDAX	CALC ADDR OF KEY CODE
0097 f095 a6 00              [ 5 ] 	LDAA	,X	GET KEY CODE
0098 f097 b7 e4 1b           [ 5 ] 	STAA	KEY	SAVE KEY VALUE
0099 f09a c6 01              [ 2 ] 	LDAB	#1
0100 f09c f7 e4 1c           [ 5 ] 	STAB	KYFLG	INDICATE KEY PENDING
0101 f09f f6 e4 86           [ 4 ] 	LDAB	PIAROW	TO CLEAR NMI
0102 f0a2 39                 [ 5 ] DIDDLE	RTS		** RETURN **
0103                               *
0104                               * THIS RTS IS USED AS A DO-NOTHING SUB
0105                               * SO SYST CAN BE DISABLED EXCEPT DISPLAY
0106                               *
0107                               
0108                               
0109                               ******************************************
0110                               *
0111                               * KYTBL - KEY VALUE TABLE
0112                               *
0113                               ******************************************
0114 f0a3 00                       KYTBL	FCB	$00	'D' KEY
0115 f0a4 0f                       	FCB	$0F	'F'
0116 f0a5 0e                       	FCB	$0E	'E'
0117 f0a6 0d                       	FCB	$0D	'D'
0118 f0a7 01                       	FCB	$01	'1'
0119 f0a8 02                       	FCB	$02	'2'
0120 f0a9 03                       	FCB	$03	'3'
0121 f0aa 0c                       	FCB	$0C	'C'
0122 f0ab 04                       	FCB	$04	'4'
0123 f0ac 05                       	FCB	$05	'5'
0124 f0ad 06                       	FCB	$06	'6'
0125 f0ae 0b                       	FCB	$0B	'B'
0126 f0af 07                       	FCB	$07	'7'
0127 f0b0 08                       	FCB	$08	'8'
0128 f0b1 09                       	FCB	$09	'9'
0129 f0b2 0a                       	FCB	$0A	'A'
0130 f0b3 84                       	FCB	$84	'FS' FUNCTION SET
0131 f0b4 85                       	FCB	$85	'FC' FUNCTION CLEAR
0132 f0b5 86                       	FCB	$86	'P/L' PUNCH/LOAD
0133 f0b6 87                       	FCB	$87	'T/B' TRACE/BREAK
0134 f0b7 80                       	FCB	$80	'MD' MEMORY DISPLAY
0135 f0b8 81                       	FCB	$81	'EX' ESCAPE
0136 f0b9 82                       	FCB	$82	'RD' REGISTER DISPLAY
0137 f0ba 83                       	FCB	$83	'GO'
0138                               *
0139                               ******************************************
0140                               *
0141                               * PUT - DISPLAYS DATA IN DISBUF & CALLS THE
0142                               *       FUNCTIONING SUBROUTINE
0143                               *
0144                               ******************************************
0145 f0bb c6 20              [ 2 ] PUT	LDAB	#%00100000	INIT DIG ENABLE PATTERN
0146 f0bd ce e4 1a           [ 3 ] LP1P	LDX	#DISBUF-3	POINT AT DISPLAY BUFFER
0147 f0c0 17                 [ 2 ] 	TBA			MAKE EXTRA COPY
0148 f0c1 08                 [ 4 ] LP2P	INX			POINT AT NEXT DIGIT
0149 f0c2 48                 [ 2 ] 	ASLA			ADD 1 TO 'X' FOR EACH SHIFT
0150 f0c3 24 fc              [ 4 ] 	BCC	LP2P		LOOP DEVELOPS DIGIT INFO ADDR
0151 f0c5 a6 00              [ 5 ] 	LDAA	,X		GET SEG INFO
0152 f0c7 43                 [ 2 ] 	COMA			ANODE DRIVERS ARE GND TRUE
0153 f0c8 b7 e4 84           [ 5 ] 	STAA	ANOD		STORE ANODE INFO TO PIA
0154 f0cb f7 e4 86           [ 5 ] 	STAB	CATH		ENABLE DIGIT CATHODE
0155 f0ce bd f1 71           [ 9 ] 	JSR	DLY1		ON FOR 1 MILISECOND
0156 f0d1 86 ff              [ 2 ] 	LDAA	#%11111111	1'S TURN OFF SEGS
0157 f0d3 b7 e4 84           [ 5 ] 	STAA	ANOD		TURN OFF ALL SEGS
0158 f0d6 b7 e4 86           [ 5 ] 	STAA	CATH		ENABLE ALL KPD ROWS
0159 f0d9 37                 [ 4 ] 	PSHB			HAS ROTATING DIGIT ENABLE
0160 f0da fe e4 19           [ 5 ] 	LDX	MNPTR		GET ADDRESS OF ACTIVE MAIN PROG
0161 f0dd ad 00              [ 8 ] 	JSR	,X		EXECUTE IT
0162                               ****
0163                               **** SEE MANUAL
0164                               ****
0165 f0df 33                 [ 4 ] 	PULB			RECOVER DIGIT ENABLE
0166 f0e0 54                 [ 2 ] 	LSRB			NEXT DIGIT
0167 f0e1 26 da              [ 4 ] 	BNE	LP1P		NOT THRU WHOLE CYCLE
0168 f0e3 20 d6              [ 4 ] 	BRA	PUT
0169                               *
0170                               ******************************************
0171                               *
0172                               * FUNSEL - ROUTINE TO SELECT A FUNCTION FROM A KEY INPUT
0173                               *
0174                               ******************************************
0175 f0e5 7d e4 1c           [ 6 ] FUNSEL	TST	KYFLG		KEY PENDING ?
0176 f0e8 26 01              [ 4 ] 	BNE	KEYNOW		YES, TEST IT
0177 f0ea 39                 [ 5 ] 	RTS			** RETURN ** NO KEY PENDING
0178                               *
0179 f0eb bd f1 ef           [ 9 ] KEYNOW	JSR	RDKEY		GET & ACKNOWLEDGE KEY
0180 f0ee 2b 15              [ 4 ] 	BMI	FUNKY		IF FUNCTION KEY
0181 f0f0 7d e4 3e           [ 6 ] 	TST	FNCFL
0182 f0f3 26 0b              [ 4 ] 	BNE	UFNK
0183 f0f5 bd f1 cc           [ 9 ] 	JSR	ROLL4		# ENTRY SO ROLL IT IN
0184 f0f8 bd f1 20           [ 9 ] 	JSR	DYSCOD		CONVERT TO 7-SEG
0185 f0fb 86 03              [ 2 ] 	LDAA	#%00000011	
0186 f0fd 7e f1 95           [ 3 ] 	JMP	CLRDS		BLANK LAST TWO DIGITS
0187                               *
0188 f100 fe e4 3f           [ 5 ] UFNK	LDX	FNCPNT		POINT AT USER FUNCTION TABLE
0189 f103 20 03              [ 4 ] 	BRA	HASH
0190                               *
0191 f105 ce f1 10           [ 3 ] FUNKY	LDX	#SYSFNC		POINT AT SYSTEM FUNCTION TBL
0192 f108 48                 [ 2 ] HASH	ASLA			TWO BYTES PER ENTRY
0193 f109 bd f1 83           [ 9 ] 	JSR	ADDAX		DEVELOP POINTER
0194 f10c ee 00              [ 6 ] 	LDX	,X		GET JMP ADDR
0195 f10e 6e 00              [ 4 ] 	JMP	,X		** GO THERE **
0196                               *
0197 f110 f1 f6                    SYSFNC	FDB	MEMBEG		'MD'
0198 f112 f0 24                    	FDB	PROMPT		'EX'
0199 f114 f2 ca                    	FDB	REGBEG		'RD'
0200 f116 f6 f3                    	FDB	GO		'GO'
0201 f118 f4 c5                    	FDB	FSET		'FS'
0202 f11a f4 d1                    	FDB	FCLR		'FC'
0203 f11c f4 d7                    	FDB	TAPBEG		'P/L'
0204 f11e f3 88                    	FDB	BRKBEG		'T/B'
0205                               *
0206                               ******************************************
0207                               *
0208                               * MISC - MISC ROUTINES
0209                               *
0210                               ******************************************
0211                               * DECODE HEX TO 7-SEGMENT
0212                               *
0213 f120 36                 [ 4 ] DYSCOD	PSHA			SAVE REGS
0214 f121 37                 [ 4 ] 	PSHB			.
0215 f122 ff e4 26           [ 6 ] 	STX	XSAV1		.
0216 f125 ce e4 2c           [ 3 ] 	LDX	#HEXBUF		POINT AT HEX INFO
0217 f128 a6 00              [ 5 ] LP01	LDAA	,X		GET HEX BYTE
0218 f12a 16                 [ 2 ] 	TAB			MAKE EXTRA COPY
0219 f12b 54                 [ 2 ] 	LSRB			RIGHT JUSTIFY HIGH NIBLE
0220 f12c 54                 [ 2 ] 	LSRB			.
0221 f12d 54                 [ 2 ] 	LSRB			.
0222 f12e 54                 [ 2 ] 	LSRB			HIGH ORDER DIGIT IN B-REG
0223 f12f 84 0f              [ 2 ] 	ANDA	#$0F		LOW ORDER DIGIT IN A-REG
0224 f131 37                 [ 4 ] 	PSHB			SAVE ON STACK
0225 f132 36                 [ 4 ] 	PSHA			.
0226 f133 08                 [ 4 ] 	INX			NEXT HEX BYTE
0227 f134 8c e4 2f           [ 3 ] 	CPX	#HEXBUF+3	DONE ?
0228 f137 26 ef              [ 4 ] 	BNE	LP01		LOOP 3 TIMES
0229 f139 ce e4 22           [ 3 ] 	LDX	#DISBUF+5	LAST DISPLAY BUFFER DIGIT
0230 f13c c6 05              [ 2 ] 	LDAB	#5		LOOP INDEX
0231 f13e ff e4 28           [ 6 ] LP02	STX	XTMP1		SAVE TEMPORARILY
0232 f141 ce f1 59           [ 3 ] 	LDX	#DYSTBL		POINT AT LOOK-UP TABLE
0233 f144 32                 [ 4 ] 	PULA			GET A HEX DIGIT TO CONVERT
0234 f145 bd f1 83           [ 9 ] 	JSR	ADDAX		POINT AT 7-SEG EQUIV
0235 f148 a6 00              [ 5 ] 	LDAA	,X		GET IT
0236 f14a fe e4 28           [ 5 ] 	LDX	XTMP1		RECOVER POINTER TO DISP BUFFER
0237 f14d a7 00              [ 6 ] 	STAA	,X		STORE CONVERTED DIG
0238 f14f 09                 [ 4 ] 	DEX			NEXT DISPLAY POS
0239 f150 5a                 [ 2 ] 	DECB			LOOP INDEX
0240 f151 2a eb              [ 4 ] 	BPL	LP02		CONTINUE FOR 6 DIGITS
0241 f153 fe e4 26           [ 5 ] 	LDX	XSAV1		RECOVER ENTRY STATUS
0242 f156 32                 [ 4 ] 	PULA
0243 f157 33                 [ 4 ] 	PULB
0244 f158 39                 [ 5 ] 	RTS			** RETURN **
0245                               *
0246                               *
0247 f159 3f                       DYSTBL	FCB	%00111111	'0'
0248 f15a 06                       	FCB	%00000110	'1'
0249 f15b 5b                       	FCB	%01011011	'2'
0250 f15c 4f                       	FCB	%01001111	'3'
0251 f15d 66                       	FCB	%01100110	'4'
0252 f15e 6d                       	FCB	%01101101	'5'
0253 f15f 7d                       	FCB	%01111101	'6'
0254 f160 07                       	FCB	%00000111	'7'
0255 f161 7f                       	FCB	%01111111	'8'
0256 f162 67                       	FCB	%01100111	'9'
0257 f163 77                       	FCB	%01110111	'A'
0258 f164 7c                       	FCB	%01111100	'B'
0259 f165 39                       	FCB	%00111001	'C'
0260 f166 5e                       	FCB	%01011110	'D'
0261 f167 79                       	FCB	%01111001	'E'
0262 f168 71                       	FCB	%01110001	'F'
0263                               *
0264                               * DELAY SUBS 
0265                               *
0266 f169 ff e4 24           [ 6 ] DLY25	STX	XSAVD	SAVE X ENTRY VALUE
0267 f16c ce 0a ea           [ 3 ] 	LDX	#2794	25 MS ENTRY POINT
0268 f16f 20 0b              [ 4 ] 	BRA	DLYLP
0269 f171 ff e4 24           [ 6 ] DLY1	STX	XSAVD	SAVE ENTRY VAL
0270 f174 ce 00 6d           [ 3 ] 	LDX	#109	1 MS COUNT
0271 f177 20 03              [ 4 ] 	BRA	DLYLP
0272 f179 ff e4 24           [ 6 ] DLYX	STX	XSAVD	REQUIRED FOR SIMILARITY TO DLY/25
0273 f17c 09                 [ 4 ] DLYLP	DEX
0274 f17d 26 fd              [ 4 ] 	BNE	DLYLP	LOOP TILL X=0
0275 f17f fe e4 24           [ 5 ] 	LDX	XSAVD	RECOVER ENTRY VALUE
0276 f182 39                 [ 5 ] 	RTS		** RETURN **
0277                               *
0278                               * ROUTINE TO ADD X=X+A
0279                               *
0280 f183 ff e4 24           [ 6 ] ADDAX	STX	XSAVD	TO ALLOW CALCS
0281 f186 bb e4 25           [ 4 ] 	ADDA	XSAVD+1	ADD LOW BYTES   	(a = a + Xl)
0282 f189 b7 e4 25           [ 5 ] 	STAA	XSAVD+1	UPDATE          	(Xl = a)
0283 f18c 24 03              [ 4 ] 	BCC	ARND	IF NO CARRY; YOU'RE DONE
0284 f18e 7c e4 24           [ 6 ] 	INC	XSAVD	ADD CARRY TO HIGH BYTE	(Xh = Xh +1)
0285 f191 fe e4 24           [ 5 ] ARND	LDX	XSAVD	RESULT TO X-REG		(X=[Xh,Xl])
0286 f194 39                 [ 5 ] 	RTS		** RETURN **
0287                               *
0288                               * CLEAR DISPLAY PER A-REG
0289                               *
0290 f195 ff e4 26           [ 6 ] CLRDS	STX	XSAV1		SAVE ENTRY VALUE
0291 f198 ce e4 22           [ 3 ] 	LDX	#DISBUF+5	RIGHTMOST DIGIT
0292 f19b 44                 [ 2 ] CLRLP	LSRA
0293 f19c 24 02              [ 4 ] 	BCC	ARNCLR		IF BIT IN A-REG NOT SET
0294 f19e 6f 00              [ 7 ] 	CLR	,X
0295 f1a0 09                 [ 4 ] ARNCLR	DEX			NEXT DISPLAY
0296 f1a1 8c e4 1c           [ 3 ] 	CPX	#DISBUF-1	DONE ?
0297 f1a4 26 f5              [ 4 ] 	BNE	CLRLP		CONTINUE 6 TIMES
0298 f1a6 fe e4 26           [ 5 ] 	LDX	XSAV1		RECOVER ENTRY VALUE
0299 f1a9 39                 [ 5 ] 	RTS		** RETURN **
0300                               *
0301 f1aa ff e4 26           [ 6 ] ROLL2	STX	XSAV1		SAVE ENTRY VALUE
0302 f1ad fe e4 2c           [ 5 ] 	LDX	HEXBUF		ADDR TO ROLL
0303 f1b0 7d e4 23           [ 6 ] 	TST	ROLPAS		FIRST PASS ?
0304 f1b3 27 07              [ 4 ] 	BEQ	ARNCL2
0305 f1b5 7f e4 23           [ 6 ] 	CLR	ROLPAS		THIS WAS PASS 1
0306 f1b8 6f 00              [ 7 ] 	CLR	,X		CLEAR LOG ON FIRST PASS
0307 f1ba 20 08              [ 4 ] 	BRA	R2OUT
0308 f1bc 68 00              [ 7 ] ARNCL2	ASL	,X
0309 f1be 68 00              [ 7 ] 	ASL	,X
0310 f1c0 68 00              [ 7 ] 	ASL	,X
0311 f1c2 68 00              [ 7 ] 	ASL	,X		SHIFT ROLL BYTE	4 PLACES
0312 f1c4 aa 00              [ 5 ] R2OUT	ORAA	,X		COMBINE NEW DATA
0313 f1c6 a7 00              [ 6 ] 	STAA	,X		UPDATE LOC
0314 f1c8 fe e4 26           [ 5 ] 	LDX	XSAV1		RECOVER ENTRY VALUE
0315 f1cb 39                 [ 5 ] 	RTS			** RETURN **
0316                               *
0317                               * ROLL 4 HEX INTO HEXBUF
0318                               *
0319 f1cc 37                 [ 4 ] ROLL4	PSHB			SAVE ENTRY VALUES
0320 f1cd 7d e4 23           [ 6 ] 	TST	ROLPAS		PASS 1  7
0321 f1d0 27 0b              [ 4 ] 	BEQ	ARNCL4		NO, CONTINUE
0322 f1d2 7f e4 23           [ 6 ] 	CLR	ROLPAS		YES, CLEAR FIRST PASS FLAG &
0323 f1d5 7f e4 2c           [ 6 ] 	CLR	HEXBUF		CLR FIRST 4 DIGITS ON FIRST PASS
0324 f1d8 b7 e4 2d           [ 5 ] 	STAA	HEXBUF+1	THEN PUT NEW DATA IN 4TH
0325 f1db 20 10              [ 4 ] 	BRA	R4OUT		.
0326 f1dd 48                 [ 2 ] ARNCL4	ASLA			LEFT JUSTIFY NEW DIGIT
0327 f1de 48                 [ 2 ] 	ASLA			.
0328 f1df 48                 [ 2 ] 	ASLA			.
0329 f1e0 48                 [ 2 ] 	ASLA			.
0330 f1e1 c6 03              [ 2 ] 	LDAB	#3		LOOP INDEX
0331 f1e3 49                 [ 2 ] RO4LP	ROLA			ROLLA INTO HEXBUF
0332 f1e4 79 e4 2d           [ 6 ] 	ROL	HEXBUF+1	.
0333 f1e7 79 e4 2c           [ 6 ] 	ROL	HEXBUF		.
0334 f1ea 5a                 [ 2 ] 	DECB			.
0335 f1eb 2a f6              [ 4 ] 	BPL	RO4LP		.
0336 f1ed 33                 [ 4 ] R4OUT	PULB			RECOVER B-REG
0337 f1ee 39                 [ 5 ] 	RTS			** RETURN **
0338                               *
0339 f1ef 7f e4 1c           [ 6 ] RDKEY	CLR	KYFLG		READ & ACKNOWLEDGE KEY
0340 f1f2 b6 e4 1b           [ 4 ] 	LDAA	KEY		.
0341 f1f5 39                 [ 5 ] 	RTS
0342                               ******************************************
0343                               *
0344                               * MEMCH - MEMORY CHANGE/DISPLAY/OFFSET ROUTINE
0345                               *
0346                               ******************************************
0347 f1f6 ce f2 05           [ 3 ] MEMBEG	LDX	#MEMCH
0348 f1f9 ff e4 19           [ 6 ] 	STX	MNPTR		INIT MAIN POINTER
0349 f1fc 7f e4 3e           [ 6 ] 	CLR	FNCFL		SET FUNCTION FLAG TO ZERO
0350 f1ff fe e4 2c           [ 5 ] 	LDX	HEXBUF		POINT AT ADDR TO DISPLAY
0351 f202 7e f2 ba           [ 3 ] 	JMP	NEWMEM		EXIT TO UPDATE DISPLAY
0352                               *
0353 f205 7d e4 1c           [ 6 ] MEMCH	TST	KYFLG		SEE IF ANY KEY PENDING
0354 f208 26 01              [ 4 ] 	BNE	MEMNOW
0355 f20a 39                 [ 5 ] 	RTS			** RETURN **
0356                               *
0357 f20b bd f1 ef           [ 9 ] MEMNOW	JSR	RDKEY		GET & ACKNOWLEDGE KEY
0358 f20e fe e4 2c           [ 5 ] 	LDX	HEXBUF		SAVES STEPS LATER
0359 f211 f6 e4 3e           [ 4 ] 	LDAB	FNCFL		SEE IF IN OFFSET MODE
0360 f214 27 77              [ 4 ] 	BEQ	NORMAL		(NOT OFFSET MODE)
0361 f216 2b 53              [ 4 ] 	BMI	CALDUN		IF OFFSET CALC FINISHED
0362 f218 4d                 [ 2 ] 	TSTA			CHECK KEY
0363 f219 2b 0d              [ 4 ] 	BMI	OFFUN		IF FUNCTION KEY
0364 f21b bd f1 cc           [ 9 ] 	JSR	ROLL4		ENTER NUMBER KEY
0365 f21e bd f1 20           [ 9 ] OFFOUT	JSR	DYSCOD		CONVERT TO 7-SEG
0366 f221 ce 00 77           [ 3 ] OFFEND	LDX	#$0077		"A"
0367 f224 ff e4 21           [ 6 ] 	STX	DISBUF+4	STORE TO LAST DIGITS
0368 f227 39                 [ 5 ] OFFRET	RTS			** RETURN **
0369                               *
0370 f228 81 83              [ 2 ] OFFUN	CMPA	#$83		'GO' ?
0371 f22a 26 fb              [ 4 ] 	BNE	OFFRET		IF NOT; EXIT
0372 f22c fe e4 2c           [ 5 ] 	LDX	HEXBUF		GET DESTINATION OF BRANCH
0373 f22f 09                 [ 4 ] 	DEX			ADJ INSTEAD OF ADJ'ING THE SOURCE
0374 f230 ff e4 2c           [ 6 ] 	STX	HEXBUF		UPDATE
0375 f233 b6 e4 2d           [ 4 ] 	LDAA	HEXBUF+1	LOW BYTE OF DESTINATION
0376 f236 f6 e4 2c           [ 4 ] 	LDAB	HEXBUF		HI BYTE
0377 f239 b0 e4 2b           [ 4 ] 	SUBA	MEMSAV+1	SUBTRACT LOW BYTES
0378 f23c f2 e4 2a           [ 4 ] 	SBCB	MEMSAV		SUBTRACT W/ CARRY
0379 f23f 4d                 [ 2 ] 	TSTA			CHECK POLARITY OF LOW ORDER RESULT
0380 f240 2a 01              [ 4 ] 	BPL	ARNINC		IF LO POS DON'T INC HI
0381 f242 5c                 [ 2 ] 	INCB			IF LOW WAS NEG INC HI $FF - $00
0382 f243 5d                 [ 2 ] ARNINC	TSTB			IF B NOW ZERO; OFFSET IS IN RANGE
0383 f244 26 11              [ 4 ] 	BNE	BADOFF		IF NOT; TOO FAR
0384 f246 b7 e4 2e           [ 5 ] 	STAA	HEXBUF+2	SAVE RESULT
0385 f249 bd f1 20           [ 9 ] 	JSR	DYSCOD		CONVERT	TO 7-SEG
0386 f24c 86 3c              [ 2 ] 	LDAA	#%00111100	CLEAR FIRST 4 DISPLAYS
0387 f24e bd f1 95           [ 9 ] 	JSR	CLRDS
0388 f251 86 80              [ 2 ] 	LDAA	#$80
0389 f253 b7 e4 3e           [ 5 ] 	STAA	FNCFL		INDICATE CALC DONE; & OK
0390 f256 39                 [ 5 ] 	RTS			** RETURN **
0391                               *
0392 f257 ce ba d0           [ 3 ] BADOFF	LDX	#$BAD0		
0393 f25a ff e4 2c           [ 6 ] 	STX	HEXBUF
0394 f25d bd f1 20           [ 9 ] 	JSR	DYSCOD		WRITE *BAD* IN FIRST 3 DISPLAYS
0395 f260 86 07              [ 2 ] 	LDAA	#%00000111
0396 f262 bd f1 95           [ 9 ] 	JSR	CLRDS		CLEAR UNUSED DIGITS
0397 f265 86 ff              [ 2 ] 	LDAA	#$FF
0398 f267 b7 e4 3e           [ 5 ] 	STAA	FNCFL		INDICATE OFFSET NOT VALID
0399 f26a 39                 [ 5 ] 	RTS			** RETURN **
0400                               *
0401 f26b 5c                 [ 2 ] CALDUN	INCB			IF IT WAS $FF IT'S NOW 0
0402 f26c 27 13              [ 4 ] 	BEQ	BADCAL		OFFSET WAS BAD
0403 f26e fe e4 2a           [ 5 ] 	LDX	MEMSAV		RECOVER MEM ADDR
0404 f271 81 85              [ 2 ] 	CMPA	#$85		FUNCTION CLEAR KEY ?
0405 f273 27 13              [ 4 ] 	BEQ	MEMBAK		YES, DON'T SAVE OFFSET
0406 f275 81 83              [ 2 ] 	CMPA	#$83		'GO' ?
0407 f277 26 ae              [ 4 ] 	BNE	OFFRET		'GO' IS ONLY VALID KEY HERE
0408 f279 b6 e4 2e           [ 4 ] 	LDAA	HEXBUF+2	GET CALC'D OFFSET
0409 f27c a7 00              [ 6 ] 	STAA	,X		STORE TO MEM
0410 f27e 08                 [ 4 ] 	INX			ADV TO NEXT MEM ADDR
0411 f27f 20 07              [ 4 ] 	BRA	MEMBAK		BACK TO MEM CHANGE
0412                               *
0413 f281 81 80              [ 2 ] BADCAL	CMPA	#$80		'MD' ?
0414 f283 26 a2              [ 4 ] 	BNE	OFFRET		'MD' IS THE ONLY VALID KEY HERE
0415 f285 fe e4 2a           [ 5 ] 	LDX	MEMSAV		RECOVER MEM ADDRESS
0416 f288 7f e4 3e           [ 6 ] MEMBAK	CLR	FNCFL		SIGNAL NOT IN OFFSET MODE
0417 f28b 20 2d              [ 4 ] 	BRA	NEWMEM		RE-ENTER MEM CHANGE
0418                               *
0419 f28d 4d                 [ 2 ] NORMAL	TSTA			SET COND CODES
0420 f28e 2a 25              [ 4 ] 	BPL	NUM		IF NUMBER KEY
0421 f290 81 80              [ 2 ] 	CMPA	#$80		'MD' ?
0422 f292 26 03              [ 4 ] 	BNE	NXM1		NO, CHECK FOR 'GO'
0423 f294 09                 [ 4 ] 	DEX			BACK UP
0424 f295 20 23              [ 4 ] 	BRA	NEWMEM		.
0425                               *	
0426 f297 81 83              [ 2 ] NXM1	CMPA	#$83		'GO' ?
0427 f299 26 03              [ 4 ] 	BNE	NXM2		NO, CHECK FOR 'FS'
0428 f29b 08                 [ 4 ] 	INX			YES, ADVANCE
0429 f29c 20 1c              [ 4 ] 	BRA	NEWMEM		.
0430 f29e 81 84              [ 2 ] NXM2	CMPA	#$84		'FS' ?
0431 f2a0 26 1d              [ 4 ] 	BNE	MEMOUT		NO MORE VALID KEYS
0432 f2a2 96 00              [ 3 ] 	LDAA	$%00111111
0433 f2a4 bd f1 95           [ 9 ] 	JSR	CLRDS		.
0434 f2a7 86 01              [ 2 ] 	LDAA	#1		.
0435 f2a9 b7 e4 3e           [ 5 ] 	STAA	FNCFL		SET OFFSET MODE
0436 f2ac b7 e4 23           [ 5 ] 	STAA	ROLPAS		SET FIRST PASS
0437 f2af ff e4 2a           [ 6 ] 	STX	MEMSAV		SAVE MEM CHG POINTER
0438 f2b2 7e f2 21           [ 3 ] 	JMP	OFFEND
0439                               *
0440 f2b5 bd f1 aa           [ 9 ] NUM	JSR	ROLL2		ENTER NEW DIGIT
0441 f2b8 20 05              [ 4 ] 	BRA	MEMOUT		DON'T SET FIRST PASS
0442                               *
0443 f2ba 86 01              [ 2 ] NEWMEM	LDAA	#1
0444 f2bc b7 e4 23           [ 5 ] 	STAA	ROLPAS		SET FIRST PASS FLAG
0445                               *
0446 f2bf a6 00              [ 5 ] MEMOUT	LDAA	,X		GET DATA TO DISPLAY
0447 f2c1 b7 e4 2e           [ 5 ] 	STAA	HEXBUF+2	UPDATE HEX BUFFER
0448 f2c4 ff e4 2c           [ 6 ] 	STX	HEXBUF		UPDATE ADDR
0449 f2c7 7e f1 20           [ 3 ] 	JMP	DYSCOD		CONV TO 7-SEG
0450                               *
0451                               
0452                               ******************************************
0453                               *
0454                               * REGDIS - REGISTER DISPLAY/CHANGE ROUTINE
0455                               *
0456                               ******************************************
0457 f2ca 7d e4 3e           [ 6 ] REGBEG	TST	FNCFL		SEE IF IN VERIFY
0458 f2cd 27 06              [ 4 ] 	BEQ	NOTVRF
0459 f2cf 7f e4 3e           [ 6 ] 	CLR	FNCFL		SIGNAL VERIFY
0460 f2d2 7e f4 dc           [ 3 ] 	JMP	LDTAP		GO VERIFY TAPE
0461 f2d5 ce f2 ee           [ 3 ] NOTVRF	LDX	#REGDIS
0462 f2d8 ff e4 19           [ 6 ] 	STX	MNPTR		INIT MAIN POINTER
0463 f2db ce f0 bb           [ 3 ] 	LDX	#PUT		SET TO RTS...
0464 f2de ff e4 7d           [ 6 ] 	STX	STKTOP-1	WILL BE TO PUT
0465 f2e1 8e e4 7c           [ 3 ] 	LDS	#STKTOP-2	INIT STACK POINTER
0466 f2e4 7f e4 41           [ 6 ] 	CLR	REGNO		INTI REG # = UPC
0467 f2e7 86 01              [ 2 ] 	LDAA	#1
0468 f2e9 b7 e4 23           [ 5 ] 	STAA	ROLPAS		INDICATE FIRST PAS
0469 f2ec 20 40              [ 4 ] 	BRA	REGOUT		TO UPDATE DISPLAY
0470                               *
0471 f2ee 7d e4 1c           [ 6 ] REGDIS	TST	KYFLG		SEE IF ANY KEY PENDING
0472 f2f1 26 01              [ 4 ] 	BNE	REGNOW
0473 f2f3 39                 [ 5 ] 	RTS
0474                               * 
0475 f2f4 bd f1 ef           [ 9 ] REGNOW	JSR	RDKEY		GET & ACKNOWLEDGE KEY
0476 f2f7 2b 05              [ 4 ] 	BMI	REGFNC		IF FUNCTION KEY
0477 f2f9 bd f1 cc           [ 9 ] 	JSR	ROLL4
0478 f2fc 20 30              [ 4 ] 	BRA	REGOUT		UPDATE DISPLAY & EXIT
0479                               *
0480 f2fe 81 80              [ 2 ] REGFNC	CMPA	#$80		'MD' ?
0481 f300 26 0d              [ 4 ] 	BNE	NXR1
0482 f302 b6 e4 41           [ 4 ] 	LDAA	REGNO
0483 f305 4a                 [ 2 ] 	DECA
0484 f306 2a 02              [ 4 ] 	BPL	ARNR1
0485 f308 86 05              [ 2 ] 	LDAA	#5		WRAP AROUND
0486 f30a b7 e4 41           [ 5 ] ARNR1	STAA	REGNO		UPDATE
0487 f30d 20 10              [ 4 ] 	BRA	NEWREG		SET UP NEW REG ON EXIT
0488                               *
0489 f30f 81 83              [ 2 ] NXR1	CMPA	#$83		'GO'
0490 f311 26 11              [ 4 ] 	BNE	RUNONE		IGNORE INVALID ENTRY
0491 f313 b6 e4 41           [ 4 ] 	LDAA	REGNO
0492 f316 4c                 [ 2 ] 	INCA
0493 f317 81 06              [ 2 ] 	CMPA	#6		PAST ?
0494 f319 26 01              [ 4 ] 	BNE	ARNR2		
0495 f31b 4f                 [ 2 ] 	CLRA			WRAP AROUND
0496 f31c b7 e4 41           [ 5 ] ARNR2	STAA	REGNO		UPDATE
0497 f31f 86 01              [ 2 ] NEWREG	LDAA	#1
0498 f321 b7 e4 23           [ 5 ] 	STAA	ROLPAS
0499                               *
0500 f324 81 87              [ 2 ] RUNONE	CMPA	#$87		T/B KEY ?
0501 f326 26 06              [ 4 ] 	BNE	REGOUT		NO, RETURN
0502 f328 ce f2 ca           [ 3 ] 	LDX	#REGBEG		YES, SET UP RETURN ADDR
0503 f32b 7e f7 01           [ 3 ] 	JMP	ROI		.
0504                               *
0505 f32e b6 e4 41           [ 4 ] REGOUT	LDAA	REGNO
0506 f331 48                 [ 2 ] 	ASLA
0507 f332 48                 [ 2 ] 	ASLA			4-BYTES PER BLOCK ENTRY
0508 f333 fe f3 70           [ 5 ] 	LDX	REGTBL		TOP OF INFO TABLE
0509 f336 bd f1 83           [ 9 ] 	JSR	ADDAX		POINT AT TABLE ENTRY
0510 f339 a6 03              [ 5 ] 	LDAA	3,X		GET 7-SEG INFO
0511 f33b 36                 [ 4 ] 	PSHA			SAVE ON STACK
0512 f33c a6 02              [ 5 ] 	LDAA	2,X		.
0513 f33e 36                 [ 4 ] 	PSHA			.
0514 f33f ee 00              [ 6 ] 	LDX	,X		GET ADDR OF DESIRED REG
0515 f341 7d e4 23           [ 6 ] 	TST	ROLPAS		SEE IF NEW REG
0516 f344 27 0a              [ 4 ] 	BEQ	NOTNEW
0517 f346 a6 00              [ 5 ] 	LDAA	,X		STORE CURRENT VAL TO DISPLAY
0518 f348 b7 e4 2c           [ 5 ] 	STAA	HEXBUF		.
0519 f34b a6 01              [ 5 ] 	LDAA	1,X		.
0520 f34d b7 e4 2d           [ 5 ] 	STAA	HEXBUF+1	.
0521                               *
0522 f350 bd f1 20           [ 9 ] NOTNEW	JSR	DYSCOD		TO CONVERT TO 7-SEG
0523 f353 32                 [ 4 ] 	PULA			RECOVER DISPLAY CODES
0524 f354 b7 e4 21           [ 5 ] 	STAA	DISBUF+4	& STORE TO DISP BUFFER
0525 f357 32                 [ 4 ] 	PULA			.
0526 f358 b7 e4 22           [ 5 ] 	STAA	DISBUF+5	.
0527 f35b 2a 08              [ 4 ] 	BPL	ARNR3		.
0528 f35d 7f e4 1d           [ 6 ] 	CLR	DISBUF		CLEAR UNUSED DISPLAYS
0529 f360 7f e4 1e           [ 6 ] 	CLR	DISBUF+1	.
0530 f363 20 05              [ 4 ] 	BRA	ONLY1		.
0531 f365 b6 e4 2c           [ 4 ] ARNR3	LDAA	HEXBUF		UPDATE HIGH OF PSEUDO REG
0532 f368 a7 00              [ 6 ] 	STAA	,X		.
0533 f36a b6 e4 2d           [ 4 ] ONLY1	LDAA	HEXBUF+1	.
0534 f36d a7 01              [ 6 ] 	STAA	1,X		UPDATE LOW BYTE
0535 f36f 39                 [ 5 ] 	RTS			** RETURN **
0536                               *
0537                               *
0538 f370 e4 36                    REGTBL	FDB	UPC
0539 f372 73 39                    	FCB	%01110011,%00111001
0540                               *
0541 f374 e4 32                    	FDB	UA-1
0542 f376 00 f7                    	FCB	%00000000,%11110111
0543                               *
0544 f378 e4 31                    	FDB	UB-1
0545 f37a 00 fc                    	FCB	%00000000,%11111100
0546                               *
0547 f37c e4 34                    	FDB	UX
0548 f37e 06 5e                    	FCB	%00000110,%01011110
0549                               *
0550 f380 e4 2f                    	FDB	USP
0551 f382 6d 73                    	FCB	%01101101,%01110011
0552                               *
0553 f384 e4 30                    	FDB	UCC-1
0554 f386 39 b9                    	FCB	%00111001,%10111001
0555                               * 
0556                               
0557                               ******************************************
0558                               *
0559                               * BRKBEG - BREAKPOINT EDITOR
0560                               *
0561                               ******************************************
0562 f388 7d e4 3e           [ 6 ] BRKBEG	TST	FNCFL		FUNCTION FLAG SET ?
0563 f38b 26 01              [ 4 ] 	BNE	BRKEDT		YES, EDIT BREAKPOINTS
0564 f38d 39                 [ 5 ] 	RTS			NO, TAKE NO ACTION
0565 f38e ce f3 9c           [ 3 ] BRKEDT	LDX	#BRKPNT		SET MNPTR WITH BREAKPOINT ROUTINE
0566 f391 ff e4 19           [ 6 ] 	STX	MNPTR		.
0567 f394 86 01              [ 2 ] 	LDAA	#$01		SET UP FOR ADDR INPUT
0568 f396 b7 e4 23           [ 5 ] 	STAA	ROLPAS		.
0569 f399 7e f3 c0           [ 3 ] 	JMP	DISBRK		DISPLAY NEXT BKPT
0570 f39c 7d e4 1c           [ 6 ] BRKPNT	TST	KYFLG		KEY PENDING ?
0571 f39f 26 01              [ 4 ] 	BNE	BRKTST		YES, DECODE KEY ?
0572 f3a1 39                 [ 5 ] 	RTS			NO, RETURN TO PUT
0573 f3a2 bd f1 ef           [ 9 ] BRKTST	JSR	RDKEY		GET & ACKNOWLEDGE KEY
0574 f3a5 81 0f              [ 2 ] 	CMPA	#$0F		HEX ?
0575 f3a7 22 06              [ 4 ] 	BHI	NOTHEX		NO, CHECK FOR FUNCTION
0576 f3a9 bd f1 cc           [ 9 ] 	JSR	ROLL4		YES, ROLL INTO HEXBUF
0577 f3ac 7e f1 20           [ 3 ] 	JMP	DYSCOD		DISPLAY & RETURN TO PUT
0578 f3af 81 84              [ 2 ] NOTHEX	CMPA	#$84		FS KEY ?
0579 f3b1 26 02              [ 4 ] 	BNE	CKFC		NO, TRY FC
0580 f3b3 20 3c              [ 4 ] 	BRA	BKTOTB		YES, ENTER AS BKPT & RETURN
0581 f3b5 81 85              [ 2 ] CKFC	CMPA	#$85		FC KEY ?
0582 f3b7 26 03              [ 4 ] 	BNE	CKGO		NO, CHECK FOR GO
0583 f3b9 7e f4 2e           [ 3 ] 	JMP	BKFMTB		YES, REMOVE A BKPT
0584 f3bc 81 83              [ 2 ] CKGO	CMPA	#$83		GO KEY ?
0585 f3be 26 30              [ 4 ] 	BNE	DISDUN		YES, DISPLAY NEXT BKPT & RETURN
0586                               *
0587                               * DISBRK - DISPLAY NEXT BREAKPOINT
0588                               *
0589 f3c0 b6 e4 44           [ 4 ] DISBRK	LDAA	BRKNO		GET # INTO HEXBUF
0590 f3c3 b7 e4 2e           [ 5 ] 	STAA	HEXBUF+2	ANY BREAKPOINTS ?
0591 f3c6 27 1b              [ 4 ] 	BEQ	BACK		NO, RETURN
0592 f3c8 fe e4 42           [ 5 ] 	LDX	BKPNTR		YES, DISPLAY NEXT ONE
0593 f3cb 08                 [ 4 ] BKLOOP	INX			.
0594 f3cc 08                 [ 4 ] 	INX			.
0595 f3cd 08                 [ 4 ] 	INX			.
0596 f3ce 08                 [ 4 ] 	INX			.
0597 f3cf 8c e4 59           [ 3 ] 	CPX	#BRKEND		END OF TAB
0598 f3d2 26 03              [ 4 ] 	BNE	NOTEND		NO, GO TEST FOR BKPT
0599 f3d4 ce e4 45           [ 3 ] 	LDX	#BRKTAB		YES, WRAP AROUND
0600 f3d7 6d 03              [ 7 ] NOTEND	TST	3,X		BREAKPOINT ?
0601 f3d9 27 f0              [ 4 ] 	BEQ	BKLOOP		NO, TRY NEXT LOC
0602 f3db ff e4 42           [ 6 ] 	STX	BKPNTR		YES, MOVE POINTER
0603 f3de ee 00              [ 6 ] 	LDX	0,X		GET BKPT ADDR
0604 f3e0 ff e4 2c           [ 6 ] 	STX	HEXBUF		& DISPLAY IT
0605 f3e3 bd f1 20           [ 9 ] BACK	JSR	DYSCOD		.
0606 f3e6 7d e4 44           [ 6 ] 	TST	BRKNO		ANY BREALPOINTS ?
0607 f3e9 26 05              [ 4 ] 	BNE	DISDUN		YES, RETURN
0608 f3eb 86 fe              [ 2 ] 	LDAA	#$FE		MASK ALL BUT LSD
0609 f3ed bd f1 95           [ 9 ] 	JSR	CLRDS		.
0610 f3f0 39                 [ 5 ] DISDUN	RTS			RETURN TO PUT
0611                               *
0612                               * BKTOTB-ENTER A BREAKPOINT FROM HEXBUF INTO
0613                               *	THE TABLE & UPDATEBRKNO
0614                               *
0615 f3f1 bd f4 a0           [ 9 ] BKTOTB	JSR	FNDBRK		BREAKPOINT EXIST?
0616 f3f4 25 32              [ 4 ] 	BCS	FULL		YES, RETURN
0617 f3f6 8d 46              [ 8 ] 	BSR	BKNO		FIND OPEN SPACE
0618 f3f8 b6 e4 44           [ 4 ] 	LDAA	BRKNO		GET # OF BREAKPOINTS
0619 f3fb 81 05              [ 2 ] 	CMPA	#$05		FULL ?
0620 f3fd 2c 29              [ 4 ] 	BGE	FULL		YES
0621                               * CHECK FOR RAM
0622 f3ff fe e4 2c           [ 5 ] 	LDX	HEXBUF		TEST FOR RAM
0623 f402 a6 00              [ 5 ] 	LDAA	0,X		.
0624 f404 43                 [ 2 ] 	COMA			.
0625 f405 63 00              [ 7 ] 	COM	0,X		.
0626 f407 a1 00              [ 5 ] 	CMPA	0,X		RAM ?
0627 f409 26 1d              [ 4 ] 	BNE	FULL		NO, RETURN
0628 f40b 43                 [ 2 ] 	COMA			YES, RESTORE DATA
0629 f40c a7 00              [ 6 ] 	STAA	0,X		.
0630                               * ENTER BKPT INTO TABLE
0631 f40e fe e4 42           [ 5 ] 	LDX	BKPNTR		POINT INTO BREAKPOINT TAB
0632 f411 a7 02              [ 6 ] 	STAA	2,X		SAV OPCODE
0633 f413 b6 e4 2c           [ 4 ] 	LDAA	HEXBUF		GET OP CODE ADDR
0634 f416 f6 e4 2d           [ 4 ] 	LDAB	HEXBUF+1	.
0635 f419 a7 00              [ 6 ] 	STAA	0,X		INSERT BREAKPOINT
0636 f41b e7 01              [ 6 ] 	STAB	1,X		.
0637 f41d 7c e4 44           [ 6 ] 	INC	BRKNO		COUNT BREALPOINT
0638 f420 6c 03              [ 7 ] 	INC	3,X		FLAG BREAKPOINT
0639 f422 7c e4 2e           [ 6 ] 	INC	HEXBUF+2	UPDATE BKPT NO.
0640 f425 bd f1 20           [ 9 ] 	JSR	DYSCOD		.
0641 f428 86 01              [ 2 ] FULL	LDAA	#$01		RESET ROLPAS
0642 f42a b7 e4 23           [ 5 ] 	STAA	ROLPAS		.
0643 f42d 39                 [ 5 ] 	RTS			& RETURN
0644                               *
0645                               * BKFMTB - REMOVE A BREAKPOINT FROM BUFFER
0646                               *	& UPDATE BRKNO
0647                               *
0648 f42e 8d 70              [ 8 ] BKFMTB	BSR	FNDBRK		BKPT (DISBUF) IN TABLE ?
0649 f430 24 8e              [ 4 ] 	BCC	DISBRK		NO, RETURN
0650 f432 fe e4 42           [ 5 ] 	LDX	BKPNTR		YES, GET ITS ADDR
0651 f435 6f 03              [ 7 ] 	CLR	3,X		& REMOVE IT
0652 f437 6f 02              [ 7 ] 	CLR	2,X		REMOVE OP CODE
0653 f439 7a e4 44           [ 6 ] 	DEC	BRKNO		UPDATE	COUNT
0654 f43c 20 82              [ 4 ] 	BRA	DISBRK		DISPLAY BKPT & RETURN
0655                               *
0656                               * BKNO - FIND NUMBER OF BREAKPOINTS, UPDATE BRKNO
0657                               *	 & PUT ADDRESS OF LAST OPEN SPACE INTO BKPNTR
0658                               *
0659 f43e 7f e4 44           [ 6 ] BKNO	CLR	BRKNO
0660 f441 ce e4 45           [ 3 ] 	LDX	#BRKTAB
0661 f444 6d 03              [ 7 ] BKLOP	TST	3,X		BREAKPOINT HERE ?
0662 f446 27 05              [ 4 ] 	BEQ	NEXT1		NO, TRY NEXT ENTRY
0663 f448 7c e4 44           [ 6 ] 	INC	BRKNO		YES, COUNT IT
0664 f44b 20 03              [ 4 ] 	BRA	ISBKPT		SO DONT SAVE ADDR
0665 f44d ff e4 42           [ 6 ] NEXT1	STX	BKPNTR		& SAVE ADDR
0666 f450 08                 [ 4 ] ISBKPT	INX			POINT TO NEXT ENTRY
0667 f451 08                 [ 4 ] 	INX			.
0668 f452 08                 [ 4 ] 	INX			.
0669 f453 08                 [ 4 ] 	INX			.
0670 f454 8c e4 59           [ 3 ] 	CPX	#BRKEND		DONE ?
0671 f457 26 eb              [ 4 ] 	BNE	BKLOP		NO, CONTINUE
0672 f459 86 01              [ 2 ] 	LDAA	#$01		RESET ROLPAS
0673 f45b b7 e4 23           [ 5 ] 	STAA	ROLPAS		.
0674 f45e 39                 [ 5 ] 	RTS			YES
0675                               ******************************************
0676                               *
0677                               * INBKS - INSERT BREAKPOINTS FROM TABLE TO MEM
0678                               *
0679                               ******************************************
0680 f45f 7d e4 44           [ 6 ] INBKS	TST	BRKNO		BREAKPOINTS ?
0681 f462 27 20              [ 4 ] 	BEQ	NOBPT		NO, RETURN
0682 f464 ce e4 45           [ 3 ] 	LDX	#BRKTAB		YES, INSTALL'EM
0683 f467 6d 03              [ 7 ] CKBKPT	TST	3,X		BREAKPOINT ?
0684 f469 27 10              [ 4 ] 	BEQ	NEXT2		NO, TRY NEXT ENTRY
0685                               * INSTALL THE BREAKPOINT
0686 f46b ff e4 42           [ 6 ] 	STX	BKPNTR		SAVE X
0687 f46e 86 3f              [ 2 ] 	LDAA	#$3F		SWI
0688 f470 ee 00              [ 6 ] 	LDX	0,X		GET ADDR
0689 f472 e6 00              [ 5 ] 	LDAB	0,X		GET OP CODE
0690 f474 a7 00              [ 6 ] 	STAA	0,X		STORE SWI
0691 f476 fe e4 42           [ 5 ] 	LDX	BKPNTR		RESTORE X
0692 f479 e7 02              [ 6 ] 	STAB	2,X		SAVE OPCODE
0693                               *	NEXT ENTRY
0694 f47b 08                 [ 4 ] NEXT2	INX			.
0695 f47c 08                 [ 4 ] 	INX			.
0696 f47d 08                 [ 4 ] 	INX			.
0697 f47e 08                 [ 4 ] 	INX			.
0698 f47f 8c e4 59           [ 3 ] 	CPX	#BRKEND		DONE ?
0699 f482 26 e3              [ 4 ] 	BNE	CKBKPT		NO, CONTINUE
0700 f484 39                 [ 5 ] NOBPT	RTS
0701                               ******************************************
0702                               *
0703                               * OUTBKS - REMOVE BREAKPOINTS FROM MEMORY
0704                               *
0705                               ******************************************
0706 f485 ce e4 45           [ 3 ] OUTBKS	LDX	#BRKTAB		POINT TO BREAKPOINT TAB
0707 f488 a6 02              [ 5 ] REMOV1	LDAA	2,X		OP CODE ?
0708 f48a 27 0a              [ 4 ] 	BEQ	NEXT3		NO, TRY NEXT ENTRY
0709                               * REMOVE BREAKPOINT FROM RAM
0710 f48c ff e4 42           [ 6 ] 	STX	BKPNTR		SAVE X
0711 f48f ee 00              [ 6 ] 	LDX	0,X		GET MEM ADDR
0712 f491 a7 00              [ 6 ] 	STAA	0,X		INSERT OPCODE
0713 f493 fe e4 42           [ 5 ] 	LDX	BKPNTR		RESTORE X
0714                               * NEXT ENTRY
0715 f496 08                 [ 4 ] NEXT3	INX			.
0716 f497 08                 [ 4 ] 	INX			.
0717 f498 08                 [ 4 ] 	INX			.
0718 f499 08                 [ 4 ] 	INX			.
0719 f49a 8c e4 59           [ 3 ] 	CPX	#BRKEND		DONE ?
0720 f49d 26 e9              [ 4 ] 	BNE	REMOV1		NO, CONTINUE
0721 f49f 39                 [ 5 ] 	RTS			YES, RETURN
0722                               *
0723                               * FDBRK - FIND BREAKPOINT (NEXBUF) IN BRKTAB
0724                               * 	 BRKPNTR POINTS AT BREAKPOINT & CARRY
0725                               *	 IS SET IF BREAKPOINT EXISTS, ELSE C IS =R"'0"
0726                               *
0727 f4a0 b6 e4 2c           [ 4 ] FNDBRK	LDAA	HEXBUF		BREAKPOINT MSB
0728 f4a3 f6 e4 2d           [ 4 ] 	LDAB	HEXBUF+1	BREAKPOINT LDB
0729 f4a6 ce e4 45           [ 3 ] 	LDX	#BRKTAB		BREAKPOINT TAB
0730 f4a9 a1 00              [ 5 ] BRKLOP	CMPA	0,X		MATCH ?
0731 f4ab 27 0b              [ 4 ] 	BEQ	CKLSB		YES
0732 f4ad 08                 [ 4 ] NEXT	INX			NO POINT TO NEXT
0733 f4ae 08                 [ 4 ] 	INX			.
0734 f4af 08                 [ 4 ] 	INX			.
0735 f4b0 08                 [ 4 ] 	INX			.
0736 f4b1 8c e4 59           [ 3 ] 	CPX	#BRKEND		DONE ?
0737 f4b4 26 f3              [ 4 ] 	BNE	BRKLOP		NO, CONTINUE
0738 f4b6 0c                 [ 2 ] 	CLC			YES, BUT NO BKPT
0739 f4b7 39                 [ 5 ] 	RTS
0740 f4b8 e1 01              [ 5 ] CKLSB	CMPB	1,X		MATCH ?
0741 f4ba 26 f1              [ 4 ] 	BNE	NEXT		NO, TRY NEXT ENTRY
0742 f4bc 6d 03              [ 7 ] 	TST	3,X		BREAKPOINT ACTIVE ?
0743 f4be 27 ed              [ 4 ] 	BEQ	NEXT		NO TRY AGAIN
0744 f4c0 0d                 [ 2 ] 	SEC			YES, FOUND IT
0745 f4c1 ff e4 42           [ 6 ] 	STX	BKPNTR		SAVE ADDR
0746 f4c4 39                 [ 5 ] 	RTS
0747                               ******************************************
0748                               *
0749                               * FSET - SET FUNCTION FLAG & DISPLAY "FS"
0750                               *
0751                               ******************************************
0752 f4c5 86 01              [ 2 ] FSET	LDAA	#$01		TO SET FUNCTION FLAG
0753 f4c7 ce 07 16           [ 3 ] 	LDX	#$716S		CODE FOR "FS"
0754 f4ca b7 e4 3e           [ 5 ] FOUT	STAA	FNCFL		
0755 f4cd ff e4 21           [ 6 ] 	STX	DISBUF+4	.
0756 f4d0 39                 [ 5 ] 	RTS			RETURN TO PUT
0757                               ******************************************
0758                               *
0759                               * FCLR - CLEAR FUNCTION FLAG & LAST 2 DIGITS
0760                               *
0761                               ******************************************
0762 f4d1 4f                 [ 2 ] FCLR	CLRA			TO CLEAR FUNCTION FLAG
0763 f4d2 ce 00 00           [ 3 ] 	LDX	#$0000		TO CLEARLAST 2 DIGITS
0764 f4d5 20 f3              [ 4 ] 	BRA	FOUT
0765                               ******************************************
0766                               *
0767                               * TAPES - SOFTWARE CASSETE TAPE INTERFACE
0768                               *
0769                               ******************************************
0770 f4d7 7d e4 3e           [ 6 ] TAPBEG	TST	FNCFL		SEE IF PUNCH OR LOAD
0771 f4da 27 06              [ 4 ] 	BEQ	PCH
0772 f4dc bd f6 9c           [ 9 ] LDTAP	JSR	LOAD		DO LOAD (OR VERF)
0773 f4df 7e f0 24           [ 3 ] 	JMP	PROMPT		WHEN DONE
0774                               *
0775 f4e2 ce f4 ec           [ 3 ] PCH	LDX	#BEGEND		POINT AT BEGEND ROUTINE
0776 f4e5 ff e4 19           [ 6 ] 	STX	MNPTR		ACTIVATE
0777 f4e8 86 bb              [ 2 ] 	LDAA	#$BB
0778 f4ea 20 1d              [ 4 ] 	BRA	CONOUT		DISPLAY	BB IN LAST DISPLAYS
0779                               *
0780 f4ec 7d e4 1c           [ 6 ] BEGEND	TST	KYFLG		SEE IF KEY PENDING
0781 f4ef 26 01              [ 4 ] 	BNE	ASNOW
0782 f4f1 39                 [ 5 ] 	RTS			** RETURN NO KEY **
0783                               *
0784 f4f2 bd f1 ef           [ 9 ] ASNOW	JSR	RDKEY		READ & ACKNOWLEDGE KEY
0785 f4f5 2b 05              [ 4 ] 	BMI	FUNK		FUNCTION KEY
0786 f4f7 bd f1 cc           [ 9 ] 	JSR	ROLL4		ENTER NEW NUMBER
0787 f4fa 20 16              [ 4 ] 	BRA	DYSOUT		CONVERT TO 7-SEG & LEAVE
0788                               *
0789 f4fc 86 ee              [ 2 ] FUNK	LDAA	#$EE
0790 f4fe b1 e4 2e           [ 4 ] 	CMPA	HEXBUF+2	END ADDR DONE ?
0791 f501 27 12              [ 4 ] 	BEQ	DOPCH		GO DO PUNCH
0792 f503 fe e4 2c           [ 5 ] 	LDX	HEXBUF		SAVE ENTERED ADDR
0793 f506 ff e4 60           [ 6 ] 	STX	BEGAD		
0794 f509 b7 e4 2e           [ 5 ] CONOUT	STAA	HEXBUF+2	'EE' OR 'BB' TO LAST DISPLAYS
0795 f50c 7f e4 2c           [ 6 ] 	CLR	HEXBUF		CLEAR FIRST FOUR NIBBLES
0796 f50f 7f e4 2d           [ 6 ] 	CLR	HEXBUF+1	
0797 f512 7e f1 20           [ 3 ] DYSOUT	JMP	DYSCOD		CONV & RETURN
0798                               *
0799 f515 fe e4 2c           [ 5 ] DOPCH	LDX	HEXBUF		SAVE ENTERED ADDR
0800 f518 ff e4 62           [ 6 ] 	STX	ENDAD
0801 f51b bd f6 30           [ 9 ] 	JSR	PUNCH		PUNCH TAPE
0802 f51e 7e f0 24           [ 3 ] 	JMP	PROMPT		WHEN DONE
0803                               *
0804                               ******************************************
0805                               * FEDGE - ROUTINE TO LOCATE AN EDGE (POS OR NEG)
0806                               *         AND DETERMINE DISTANCE TO IT (TIME)
0807                               *		EXECUTION TIME TUNNED
0808                               ******************************************
0809                               *				FOR BSR
0810 f521 86 05              [ 2 ] FEDGE	LDAA	#5		START COUNT=FIXED (-1)
0811 f523 f6 e4 84           [ 4 ] 	LDAB	PIADP		CLEAR INTERRUPT
0812 f526 01                 [ 2 ] 	NOP			DELAY
0813 f527 4c                 [ 2 ] LOOPF	INCA			DURATION COUNT IN A-REG
0814 f528 f6 e4 85           [ 4 ] 	LDAB	PIACR		CHECK FOR EDGE FOUND
0815 f52b 2a fa              [ 4 ] 	BPL	LOOPF		IF NOT KEEP LOOKING
0816 f52d c8 02              [ 2 ] 	EORB	#$02		INVERT EDGE SENSE CONTROL
0817 f52f f7 e4 85           [ 5 ] 	STAB	PIACR		PIA LOOKS FOR OTHER EDGE
0818 f532 39                 [ 5 ] 	RTS			** RETURN **
0819                               
0820                               ******************************************
0821                               * TIN - READ 1 BYTE FROM TAPE
0822                               *       TIME TUNNED
0823                               *
0824                               ******************************************
0825                               *				FOR JSR
0826 f533 96 ff              [ 3 ] TIN	LDAA	$FF
0827 f535 b7 e4 59           [ 5 ] 	STAA	BYTE		INITIALIZE BYTE
0828 f538 7f e4 5a           [ 6 ] 	CLR	CYCNT		
0829 f53b 7f e4 5b           [ 6 ] 	CLR	CYCNT+1		INIT BIT-TIME COUNT
0830 f53e 7f e4 5c           [ 6 ] 	CLR	GOOD1S		INIT LOGIC SENSE
0831 f541 8d de              [ 8 ] 	BSR	FEDGE		[22/21+-5] SYNC TO AN EDGE
0832 f543 7d f5 43           [ 6 ] 	TST	*		DELAY
0833 f546 7d f5 46           [ 6 ] NOTSH	TST	*		DELAY
0834 f549 b7 e4 5d           [ 5 ] 	STAA	OLD		*
0835 f54c 8d d3              [ 8 ] 	BSR	FEDGE		[22/21+-5] MEASURE TO NEXT EDGE
0836 f54e 81 1b              [ 2 ] 	CMPA	#27		<1.5 SHORT HALF ?
0837 f550 2c f4              [ 4 ] 	BGE	NOTSH		MUST FIND SHORT FIRST
0838 f552 b7 e4 5d           [ 5 ] LOOPS	STAA	OLD		SAVE LAST COUNT
0839 f555 8d ca              [ 8 ] 	BSR	FEDGE		[22/21+-5] MEASURE TO NEXT
0840 f557 16                 [ 2 ] 	TAB			MAKE EXTRA COPY
0841 f558 fb e4 5d           [ 4 ] 	ADDB	OLD		SUM OF LAST 2
0842 f55b c1 2b              [ 2 ] 	CMPB	#43		> 2.33 NOM. SHORTS?
0843 f55d 2f f3              [ 4 ] 	BLE	LOOPS		KEEP LOOKING FOR LONG
0844                               *
0845                               * EDGE SENSE SET-UP TO SENSE TRAILING EDGES OF CYCLES
0846                               * & YOU ARE IN THE MIDDLE OF THE FIRST LONG CYCLE
0847                               *
0848 f55f 7e f5 62           [ 3 ] 	JMP	*+3		DELAY
0849 f562 f6 e4 84           [ 4 ] 	LDAB	PIADP		CLEAR	INTERRUPT FLAG
0850 f565 8b 05              [ 2 ] 	ADDA	#5		COMPENSATE FOR PROCESSING
0851 f567 20 10              [ 4 ] 	BRA	SYNCIN		BRANCH INTO COUNT LOOP
0852 f569 86 00              [ 2 ] LPOUT	LDAA	#0		INIT BIT TIME COUNT
0853 f56b 20 00              [ 4 ] 	BRA	LPMID		DELAY
0854 f56d 7f e4 5a           [ 6 ] LPMID	CLR	CYCNT
0855 f570 b7 e4 5b           [ 5 ] 	STAA	CYCNT+1		ESTABLISH BIT-TIME COUNT
0856 f573 7f e4 5c           [ 6 ] 	CLR	GOOD1S		INIT LOGIC SENSE
0857 f576 86 0a              [ 2 ] LPIN	LDAA	#10		FIXED TIME (-1)= INIT COUNT
0858 f578 4c                 [ 2 ] LOOP1	INCA			A-REG HOLDS DURATION COUNT
0859 f579 f6 e4 85           [ 4 ] SYNCIN	LDAB	PIACR		EDGE YET ?
0860 f57c 2a fa              [ 4 ] 	BPL	LOOP1		IF NOT; KEEP LOOKING
0861 f57e f6 e4 84           [ 4 ] 	LDAB	PIADP		CLEAR INTERRUP FLAG
0862 f581 7d f5 81           [ 6 ] 	TST	*		DELAY TO MAKE PASS TIME...
0863 f584 01                 [ 2 ] 	NOP			EVEN MULTIPLE OF LOOP TIME
0864 f585 81 34              [ 2 ] 	CMPA	#52		<1.4 SHORT ?
0865 f587 2d 05              [ 4 ] 	BLT	SHRT
0866 f589 7c e4 5c           [ 6 ] 	INC	GOOD1S
0867 f58c 20 05              [ 4 ] 	BRA	WITHIN
0868 f58e 7a e4 5c           [ 6 ] SHRT	DEC	GOOD1S		GOOD1S POS MEANS 0
0869 f591 20 00              [ 4 ] 	BRA	WITHIN		DELAY
0870 f593 f6 e4 5a           [ 4 ] WITHIN	LDAB	CYCNT		HIGH BYTE
0871 f596 bb e4 5b           [ 4 ] 	ADDA	CYCNT+1		ADD CURRENT TO BIT-TIME COUNT
0872 f599 b7 e4 5b           [ 5 ] 	STAA	CYCNT+1		UPDATE
0873 f59c c9 00              [ 2 ] 	ADCB	#0		ADD IN CARRY
0874 f59e f7 e4 5a           [ 5 ] 	STAB	CYCNT		UPDATE HIGH BYTE
0875 f5a1 26 03              [ 4 ] 	BNE	CHKOVR		IF CARRY; BIT MAY BE OVER
0876 f5a3 01                 [ 2 ] 	NOP			DELAY
0877 f5a4 20 04              [ 4 ] 	BRA	NOTOVR		BIT NOT OVER
0878 f5a6 81 17              [ 2 ] CHKOVR	CMPA	#23		(279-245)
0879 f5a8 2c 0a              [ 4 ] 	BGE	BITOVR		BIT-TIME EXPIRED
0880 f5aa c6 05              [ 2 ] NOTOVR	LDAB	#5		[38]
0881 f5ac 5a                 [ 2 ] 	DECB			*
0882 f5ad 2a fd              [ 4 ] 	BPL	*-1		*
0883 f5af 7e f5 b2           [ 3 ] 	JMP	*+3		
0884 f5b2 20 c2              [ 4 ] 	BRA	LPIN
0885                               *
0886                               * END OF BIT TIME
0887                               *
0888 f5b4 78 e4 5c           [ 6 ] BITOVR	ASL	GOOD1S		LOGIC SENSE TO CARRY
0889 f5b7 76 e4 59           [ 6 ] 	ROR	BYTE		SHIFT NEW BIT INTO BYTE
0890 f5ba 24 08              [ 4 ] 	BCC	TINDUN		DONE WHEN START FALLS OUT
0891 f5bc 81 5d              [ 2 ] 	CMPA	#93		>2.5 NOM. SHORTS ?
0892 f5be 2d a9              [ 4 ] 	BLT	LPOUT		NO; BIT-TIM STARTS AT 0
0893 f5c0 86 24              [ 2 ] 	LDAA	#36		YES; TRY MAINTAIN FRAMING
0894 f5c2 20 a9              [ 4 ] 	BRA	LPMID		NEXT BIT-TIME
0895                               *
0896                               * DATA BYTE READ; CLEAN-UP AND LEAVE
0897                               *
0898 f5c4 b6 e4 59           [ 4 ] TINDUN	LDAA	BYTE		GET CURRENT BYTE
0899 f5c7 bb e4 5e           [ 4 ] 	ADDA	CHKSM		ADD TO CHECKSUM
0900 f5ca b7 e4 5e           [ 5 ] 	STAA	CHKSM		UPDATE
0901 f5cd b6 e4 59           [ 4 ] 	LDAA	BYTE		GET RECEIVED BYTE IN A-REG
0902 f5d0 39                 [ 5 ] 	RTS			** RETURN **
0903                               ******************************************
0904                               * BIT1 - SEND A LOGIC 1 BIT-TIME
0905                               *        LESS 177 CLOCK CYCLES
0906                               *           TIME TUNNED
0907                               ******************************************
0908                               *				FOR BSR
0909 f5d1 c6 0f              [ 2 ] BIT1	LDAB	#15		# SHORT H-CYCS (-1)
0910 f5d3 bd f5 ff           [ 9 ] LOOPB1	JSR	INVRT		[20/51] TRANSMIT EDGE
0911 f5d6 86 18              [ 2 ] 	LDAA	#24		[152] 2 DELAY
0912 f5d8 4a                 [ 2 ] 	DECA			" 2
0913 f5d9 2a fd              [ 4 ] 	BPL	*-1		" 4
0914 f5db 20 00              [ 4 ] 	BRA	*+2		4 DELAY
0915 f5dd 5a                 [ 2 ] 	DECB			2 1 LESS HALF CYCLE
0916 f5de 26 f3              [ 4 ] 	BNE	LOOPB1		4 TILL 2ND EDGE
0917 f5e0 bd f5 ff           [ 9 ] 	JSR	INVRT		[20/51] 15TH EDGE IN BIT-TIME
0918 f5e3 39                 [ 5 ] 	RTS			5 ** RETURN ** 177 CYC TO NXT
0919                               ******************************************
0920                               * BIT0 - SEND A LOGIC O BIT-TIME
0921                               *        LESS 177 CLOCK CYCLES
0922                               *           TIME TUNNED
0923                               ******************************************
0924                               *				FOR BSR
0925 f5e4 c6 07              [ 2 ] BIT0	LDAB	#7		2 LONG H-CYCS (-1)
0926 f5e6 bd f5 ff           [ 9 ] LOOPB0	JSR	INVRT		[20/5] TRANSMIT EDGE
0927 f5e9 86 38              [ 2 ] 	LDAA	#56		[344] 2 DELAY
0928 f5eb 4a                 [ 2 ] 	DECA			" 2
0929 f5ec 2a fd              [ 4 ] 	BPL	*-1		" 4
0930 f5ee 01                 [ 2 ] 	NOP			2 DELAY
0931 f5ef 5a                 [ 2 ] 	DECB			2 1 LESS TO GO
0932 f5f0 26 f4              [ 4 ] 	BNE	LOOPB0		4 TILL 2ND LAST EDGE
0933 f5f2 bd f5 ff           [ 9 ] 	JSR	INVRT		[20/5] 7TH EDGE IN BIT-TIME
0934 f5f5 86 1d              [ 2 ] 	LDAA	#29		[182] 2 DELAY
0935 f5f7 4a                 [ 2 ] 	DECA			" 2
0936 f5f8 2a fd              [ 4 ] 	BPL	*-1		" 4
0937 f5fa 7e f5 fd           [ 3 ] 	JMP	*+3		3 DELAY
0938 f5fd 01                 [ 2 ] 	NOP			3 *
0939 f5fe 39                 [ 5 ] 	RTS			5 ** RETURN ** 177 CYC TO NXT
0940                               ******************************************
0941                               * INVRT - ROUTINE TO TRANSMIT A RISING
0942                               *         OR FALLING EDGE TO THE CASSETTE
0943                               *             TIME TUNNED
0944                               ******************************************
0945                               *				FOR JSR
0946 f5ff 86 80              [ 2 ] INVRT	LDAA	#$80		2
0947 f601 b8 e4 86           [ 4 ] 	EORA	PIADPB		4
0948 f604 b7 e4 86           [ 5 ] 	STAA	PIADPB		5 INVERT OUTPUT
0949 f607 39                 [ 5 ] 	RTS			5 ** RETURN **
0950                               ******************************************
0951                               * PNCHB - PUNCH 1 BITE TO TAPE, INCLUDES
0952                               *         START BIT, DATA, AND ALL BUT LAST HALF-CYCLE
0953                               *         OF STOP BITS
0954                               *                    TIME TUNNED
0955                               ******************************************
0956                               *				9 FOR JSR
0957 f608 b7 e4 59           [ 5 ] PNCHB	STAA	BYTE		5 SAVE BYTE TO PUNCH
0958 f60b 8d d7              [ 8 ] 	BSR	BIT0		[30/<177>] SEND START BIT
0959 f60d 86 09              [ 2 ] 	LDAA	#9		2 # BITS IN BYTE (+2 STOP) (-1)
0960 f60f b7 e4 5f           [ 5 ] 	STAA	NBITS		5 ESTABLISH BIT COUNT
0961 f612 7d f6 12           [ 6 ] 	TST	*		6 DELAY
0962 f615 86 13              [ 2 ] LPPOUT	LDAA	#19		[122] 2 DELAY
0963 f617 4a                 [ 2 ] 	DECA			" 2
0964 f618 2a fd              [ 4 ] 	BPL	*-1		" 4
0965 f61a 0d                 [ 2 ] 	SEC			2 SO LAST 2 BIT TIMES = 1 'S
0966 f61b 76 e4 59           [ 6 ] 	ROR	BYTE		6 LOGIC SENSE TO CARRY
0967 f61e 25 05              [ 4 ] 	BCS	DO1		4 IF LOGIC 1
0968 f620 8d c2              [ 8 ] 	BSR	BIT0		[30/<177>] XMIT A 0 BIT-TIME
0969 f622 7e f6 2a           [ 3 ] 	JMP	ENDBIT		3
0970 f625 8d aa              [ 8 ] DO1	BSR	BIT1		[30/<177>] XMIT A 1 BIT-TIME
0971 f627 7e f6 2a           [ 3 ] 	JMP	ENDBIT		3 MATCHING DELAY
0972 f62a 7a e4 5f           [ 6 ] ENDBIT	DEC	NBITS		6 1 LESS BIT-TIME TO GO
0973 f62d 2a e6              [ 4 ] 	BPL	LPPOUT		4 CONTINUE FOR BYTE+STOP BITS
0974 f62f 39                 [ 5 ] 	RTS			5 ** RETURN ** 159 CYC TO NXT
0975                               ******************************************
0976                               * PUNCH - FORMAT AND PUNCH A CASSETE DATA FILE
0977                               *         INCLUDING LEADER AND CHECKSUM
0978                               *             EXECUTION TIME TUNNED
0979                               *
0980                               ******************************************
0981                               *                                 9 FOR JSR
0982 f630 ce 03 48           [ 3 ] PUNCH	LDX	#840		3 COUNT FOR 30-SEC LEADER
0983 f633 86 ff              [ 2 ] LLOOP	LDAA	#$FF		2 LEADER CHARACTER
0984 f635 c6 10              [ 2 ] 	LDAB	#16		[104] 2 DELAY
0985 f637 5a                 [ 2 ] 	DECB			* 2
0986 f638 2a fd              [ 4 ] 	BPL	*-1		* 4
0987 f63a bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH A LEADER CHAR
0988 f63d 09                 [ 4 ] 	DEX			4
0989 f63e 26 f3              [ 4 ] 	BNE	LLOOP		4 CONTINUE FOR 30-SEC
0990                               *
0991                               * LEADER FINISHED
0992                               *
0993 f640 86 53              [ 2 ] 	LDAA	#'S		2 BLOCH START CHAR
0994 f642 c6 10              [ 2 ] 	LDAB	#16		[104] 2 DELAY
0995 f644 5a                 [ 2 ] 	DECB			* 2
0996 f645 2a fd              [ 4 ] 	BPL	*-1		* 4
0997 f647 bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH START CHAR
0998 f64a 01                 [ 2 ] 	NOP			2 DELAY
0999 f64b 7f e4 5e           [ 6 ] 	CLR	CHKSM		6 INITIALIZE CHECKSUM
1000 f64e ce e4 60           [ 3 ] 	LDX	#BEGAD		3 POINTAT FIRST ADDR BYTE0LT
1001 f651 a6 00              [ 5 ] ADLOOP	LDAA	0,X
1002 f653 16                 [ 2 ] 	TAB			2 EXTRACOPY
1003 f654 fb e4 5e           [ 4 ] 	ADDB	CHKSM		4 ADDR IS PART OF CHECKSUM
1004 f657 f7 e4 5e           [ 5 ] 	STAB	CHKSM		5 UPDATE
1005 f65a 01                 [ 2 ] 	NOP			2 DELAY
1006 f65b c6 0d              [ 2 ] 	LDAB	#13		[86] 2
1007 f65d 5a                 [ 2 ] 	DECB			* 2
1008 f65e 2a fd              [ 4 ] 	BPL	*-1		* 4
1009 f660 bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH ADDR BYTE
1010 f663 08                 [ 4 ] 	INX			4 ADV TO NEXT ADDR BYTE
1011 f664 8c e4 64           [ 3 ] 	CPX	#BEGAD+4	3 DONE YET ?
1012 f667 26 e8              [ 4 ] 	BNE	ADLOOP		4 CONTINUE FOR 4 ADDR CHARS
1013                               *
1014                               * READY TO PUNCH DATA
1015                               *
1016 f669 01                 [ 2 ] 	NOP			2 DELAY
1017 f66a 01                 [ 2 ] 	NOP			2 DELAY
1018 f66b fe e4 60           [ 5 ] 	LDX	BEGAD		5 GET BEG ADDR OF DATA
1019 f66e a6 00              [ 5 ] DLOOP	LDAA	0,X		5 GET A DATA BYTE
1020 f670 16                 [ 2 ] 	TAB			2 EXTRA COPY
1021 f671 fb e4 5e           [ 4 ] 	ADDB	CHKSM		4 ADD TO CHKSUM
1022 f674 f7 e4 5e           [ 5 ] 	STAB	CHKSM		5 UPDATE
1023 f677 f7 e4 5e           [ 5 ] 	STAB	CHKSM		5 DELAY
1024 f67a c6 0b              [ 2 ] 	LDAB	#11		[74] 2
1025 f67c 5a                 [ 2 ] 	DECB			* 2
1026 f67d 2a fd              [ 4 ] 	BPL	*-1		* 4
1027 f67f bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH DATA BYTE
1028 f682 7e f6 85           [ 3 ] 	JMP	*+3		3 DELAY
1029 f685 bc e4 62           [ 5 ] 	CPX	ENDAD		5 SEE IF DONE
1030 f688 27 03              [ 4 ] 	BEQ	DUNDAT		1 IF FINISHED
1031 f68a 08                 [ 4 ] 	INX			4 ELSE ADV TO NXT
1032 f68b 20 e1              [ 4 ] 	BRA	DLOOP		4 AND CONTINUE LOOP
1033                               *
1034                               * READY TO PUNCH CHECKSUM
1035                               *
1036 f68d 70 e4 5e           [ 6 ] DUNDAT	NEG	CHKSM		6 SUM INCL, CHECK WILL BE 0
1037 f690 b6 e4 5e           [ 4 ] 	LDAA	CHKSM		4 PREPARE TO SEND
1038 f693 c6 14              [ 2 ] 	LDAB	#20		[128] 2
1039 f695 5a                 [ 2 ] 	DECB			* 2
1040 f696 2a fd              [ 4 ] 	BPL	*-1		* 4
1041 f698 bd f6 08           [ 9 ] 	JSR	PNCHB		[44/<159>] PUNCH CHECKSUM
1042 f69b 39                 [ 5 ] 	RTS			5 ** RETURN **
1043                               ******************************************
1044                               *
1045                               * LOAD - LOAD OR VERIFY A DATA FILE FROM
1046                               *        CASSETTE TAPE
1047                               *
1048                               ******************************************
1049                               *				9 FOR A JSR
1050 f69c bd f5 33           [ 9 ] LOAD	JSR	TIN		[56/101+-5] READ A BYTE FROM TAPE
1051 f69f 81 53              [ 2 ] 	CMPA	#'S		2 BLOCK START ?
1052 f6a1 26 f9              [ 4 ] 	BNE	LOAD		4 NO; TRY AGAIN
1053                               *
1054                               * BLOCK START FOUND; NOW READ BEG & END ADDR AREA
1055                               *
1056 f6a3 ce e4 60           [ 3 ] 	LDX	#BEGAD		3 POINT AR ADDR AREA
1057 f6a6 7f e4 5e           [ 6 ] 	CLR	CHKSM		6 INITIALIZE CHECKSUM
1058 f6a9 bd f5 33           [ 9 ] LOPAD	JSR	TIN		[56/101+-5] GET ADDR CHAR
1059 f6ac a7 00              [ 6 ] 	STAA	0,X		6 STORE RECIEVED ADDR CHAR
1060 f6ae 08                 [ 4 ] 	INX			4 POINT AT NEXT ADDR LOC
1061 f6af 8c e4 64           [ 3 ] 	CPX	#BEGAD+4	3 DONE GETTING ADDR'S ?
1062 f6b2 26 f5              [ 4 ] 	BNE	LOPAD		4 NO; CONTINUE
1063                               *
1064                               * READY TO READ DATA
1065                               *
1066 f6b4 fe e4 60           [ 5 ] 	LDX	BEGAD		5 POINT TO WHERE DATA GOES
1067 f6b7 bd f5 33           [ 9 ] LOPDAT	JSR	TIN		[56/101+-5] GET DATA FROM TAPE
1068 f6ba 7d e4 3e           [ 6 ] 	TST	FNCFL		6 SEE IF LOAD OR VERF ?
1069 f6bd 27 04              [ 4 ] 	BEQ	VERF		4 IF NOT SET; IT'S VERF
1070 f6bf a7 00              [ 6 ] 	STAA	0,X		6 IT'S LOAD SO STORE DATA
1071 f6c1 20 04              [ 4 ] 	BRA	LOPBOT		4 GO TO BOTTOM OF LOOP
1072 f6c3 a1 00              [ 5 ] VERF	CMPA	0,X		5 JUST COMPARE TO MEM
1073 f6c5 26 11              [ 4 ] 	BNE	BAD		4 IF NON-COMPARE; SIGNAL ERROR
1074 f6c7 bc e4 62           [ 5 ] LOPBOT	CPX	ENDAD		5 DONE ?
1075 f6ca 27 03              [ 4 ] 	BEQ	CHKCHK		4 IF SO; CHECK CHECKSUM
1076 f6cc 08                 [ 4 ] 	INX			4 POINT AT NEXT DATA LOC
1077 f6cd 20 e8              [ 4 ] 	BRA	LOPDAT		4 AND CONTINUE LOAD/VRFY
1078                               *
1079                               * DATA FINISHED... NOW CHECK CHECSUM
1080                               *
1081 f6cf bd f5 33           [ 9 ] CHKCHK	JSR	TIN		[56/105+-5] GET CHECKSUM
1082 f6d2 7d e4 5e           [ 6 ] 	TST	CHKSM
1083 f6d5 26 01              [ 4 ] 	BNE	BAD		4 IF NOT ZERO; BAD CHECKSUM
1084 f6d7 39                 [ 5 ] 	RTS			5 ** RETURN **
1085                               *
1086 f6d8 ff e4 34           [ 6 ] BAD	STX	UX		6 S0 USER CAN SEE END ADDR
1087 f6db b7 e4 33           [ 5 ] 	STAA	UA		5 S0 USER CAN CHECK IT
1088 f6de 7d e4 3e           [ 6 ] 	TST	FNCFL		CHECK FOR ERROR	OVERRIDE
1089 f6e1 2a 01              [ 4 ] 	BPL	STOP
1090 f6e3 39                 [ 5 ] 	RTS			** RETURN ** NO MESSAGE
1091                               *
1092 f6e4 ce 71 77           [ 3 ] STOP	LDX	#$7177		"FA"
1093 f6e7 ff e4 1d           [ 6 ] 	STX	DISBUF
1094 f6ea ce 06 38           [ 3 ] 	LDX	#$0638		"IL"
1095 f6ed ff e4 1f           [ 6 ] 	STX	DISBUF+2
1096 f6f0 7e f7 35           [ 3 ] 	JMP	ALTBAD		PRINT "FAIL ??"
1097                               ******************************************
1098                               *
1099                               * GO - GOT TO USER PROGRAM
1100                               *
1101                               ******************************************
1102 f6f3 7d e4 23           [ 6 ] GO	TST	ROLPAS		HEX DATA PRIOR TO 'GO'
1103 f6f6 26 06              [ 4 ] 	BNE	CONTIN		IF NOT; ASSUME UPC
1104 f6f8 fe e4 2c           [ 5 ] 	LDX	HEXBUF		GET ENTERED VALUE
1105 f6fb ff e4 36           [ 6 ] 	STX	UPC		STORE AS GO ADDR
1106 f6fe ce f7 0b           [ 3 ] CONTIN	LDX	#GO1		RETURN ADDR AFTER ROI
1107 f701 ff e4 39           [ 6 ] ROI	STX	ROIBAK		SAVE IN RAM
1108 f704 86 01              [ 2 ] 	LDAA	#1
1109 f706 b7 e4 38           [ 5 ] 	STAA	ROIFLG		SIGNAL SINGLE TRACE
1110 f709 20 03              [ 4 ] 	BRA	GOTO		EXIT (NO BREAKS)
1111                               * COME HERE AFTER RUNNING ONE INSTRUCTION
1112 f70b bd f4 5f           [ 9 ] GO1	JSR	INBKS		INSTALL BREAKPOINTS
1113 f70e be e4 2f           [ 5 ] GOTO	LDS	USP		GET USER'S STACK POINTER
1114 f711 86 55              [ 2 ] 	LDAA	#$55		START TEST FOR EXISTANCE OF STK
1115 f713 36                 [ 4 ] 	PSHA
1116 f714 32                 [ 4 ] 	PULA
1117 f715 81 55              [ 2 ] 	CMPA	#$55		DID IT GO ?
1118 f717 26 10              [ 4 ] 	BNE	BADSTK		NO. STACK IS BAD
1119 f719 b6 e4 37           [ 4 ] 	LDAA	UPC+1		LOW BYTE
1120 f71c 36                 [ 4 ] 	PSHA			STACK FOR RTS
1121 f71d b6 e4 36           [ 4 ] 	LDAA	UPC		HIGH BYTE
1122 f720 36                 [ 4 ] 	PSHA	
1123 f721 86 aa              [ 2 ] 	LDAA	#$AA		SEE IF STACK STILL OK
1124 f723 36                 [ 4 ] 	PSHA
1125 f724 32                 [ 4 ] 	PULA
1126 f725 81 aa              [ 2 ] 	CMPA	#$AA
1127 f727 27 1e              [ 4 ] 	BEQ	GOEXIT		OK; FINAL EXIT SEQ
1128 f729 ce 40 6d           [ 3 ] BADSTK	LDX	#$406D		MESSAGE *-DP- ??* TO 7-SEG
1129 f72c ff e4 1d           [ 6 ] 	STX	DISBUF
1130 f72f ce 73 40           [ 3 ] 	LDX	#$7340
1131 f732 ff e4 1f           [ 6 ] 	STX	DISBUF+2
1132 f735 ce 53 53           [ 3 ] ALTBAD	LDX	#$5353
1133 f738 ff e4 21           [ 6 ] 	STX	DISBUF+4
1134 f73b 8e e4 7e           [ 3 ] 	LDS	#STKTOP		INIT TO GOOD AREA
1135 f73e ce f0 a2           [ 3 ] 	LDX	#DIDDLE		DO-NOTHING SUB
1136 f741 ff e4 19           [ 6 ] 	STX	MNPTR		STORE AS MAIN PROG
1137 f744 7e f0 bb           [ 3 ] 	JMP	PUT		ONLY ESCAPE IS RESET OR 'EX'
1138                               *
1139 f747 fe e4 34           [ 5 ] GOEXIT	LDX	UX		RECOVER USER STATUS
1140 f74a f6 e4 32           [ 4 ] 	LDAB	UB
1141 f74d b6 e4 33           [ 4 ] 	LDAA	UA
1142 f750 36                 [ 4 ] 	PSHA			TEMP SAVE ON USER STACK
1143 f751 86 01              [ 2 ] 	LDAA	#1
1144 f753 b7 e4 3b           [ 5 ] 	STAA	UPROG		FLAG SIGNALS IN USER PROG
1145 f756 7d e4 38           [ 6 ] 	TST	ROIFLG		TRACE EXIT ?
1146 f759 27 12              [ 4 ] 	BEQ	ABSOUT		IF NOT;; JUST GET GOING
1147 f75b 86 3c              [ 2 ] 	LDAA	#$3C
1148 f75d b7 e4 85           [ 5 ] 	STAA	PIACRA		HOLDS TRACE COUNTER RESET
1149 f760 b6 e4 86           [ 4 ] 	LDAA	PIAPB		READ TO CLEAR ANY INT FLAG
1150 f763 86 0e              [ 2 ] 	LDAA	#$0E
1151 f765 b7 e4 87           [ 5 ] 	STAA	PIACRB		ENABLE TRACE NMI
1152 f768 86 34              [ 2 ] 	LDAA	#$34
1153 f76a b7 e4 85           [ 5 ] 	STAA	PIACRA		RELEASE TIMER
1154 f76d b6 e4 31           [ 4 ] ABSOUT	LDAA	UCC		TIMED EXIT TO USER PROG
1155 f770 06                 [ 2 ] 	TAP			SET USER COND CODES
1156 f771 32                 [ 4 ] 	PULA			SET USER A-REG; DON'T MESS 'CC'
1157 f772 39                 [ 5 ] 	RTS			*** EXIT TO USER PROG ***
1158                               *
1159                               ******************************************
1160                               *
1161                               * INTERRUPTS - INTERRUPT HANDLING ROUTINES
1162                               *
1163                               ******************************************
1164 f773 01                 [ 2 ] NMINT	NOP			SET IRQ FLAG
1165 f774 0f                 [ 2 ] 	SEI			.
1166 f775 86 04              [ 2 ] 	LDAA	#$04		PIA DISABLE CODE
1167 f777 b7 e4 87           [ 5 ] 	STAA	PIACRB		DISABLE NMI'S DURIN SERVICE
1168 f77a b6 e4 87           [ 4 ] 	LDAA	PIACRB		READ INT STATUS
1169 f77d 2a 12              [ 4 ] 	BPL	SAVE		IF RETURN FROM TRACE
1170                               * KEY CLOSURE CAUSED NMI
1171 f77f bd f0 4e           [ 9 ] 	JSR	GET		FIND AND DEBOUNCE KEY
1172 f782 81 81              [ 2 ] 	CMPA	#$81		'EX' ?
1173 f784 27 03              [ 4 ] 	BEQ	ABORT
1174 f786 8d 26              [ 8 ] 	BSR	ENNMI		RE-ENABLE INTERRUPT
1175 f788 3b                 [10 ] 	RTI
1176                               * 'EX' KEY: PROMPT OR ABORT
1177 f789 7d e4 3b           [ 6 ] ABORT	TST	UPROG		ESCAPE FROM USER PROG ?
1178 f78c 26 03              [ 4 ] 	BNE	SAVE		IF ESCAPE FROM USER PROG
1179 f78e 7e f0 24           [ 3 ] 	JMP	PROMPT		*** ALREADY IN OPT-SYST ***
1180 f791 bf e4 2f           [ 6 ] SAVE	STS	USP		SAVE POINTER TO USER REGS
1181 f794 8e e4 7e           [ 3 ] 	LDS	#STKTOP		INIT TO SYST AREA
1182 f797 8d 21              [ 8 ] 	BSR	SVSTAT		RECOVER STATUS AT 'EX' TIME
1183 f799 8d 13              [ 8 ] 	BSR	ENNMI		RE-ENABLE KEY NMI
1184 f79b 7f e4 3b           [ 6 ] 	CLR	UPROG		SIGNAL NOT IN USER PROGRAM
1185 f79e 7d e4 38           [ 6 ] 	TST	ROIFLG		IS THIS RETURN FROM TRACE ?
1186 f7a1 27 08              [ 4 ] 	BEQ	NOTROI		IF NOT
1187 f7a3 7f e4 38           [ 6 ] 	CLR	ROIFLG		SIGNAL NOT ROI NOW
1188 f7a6 fe e4 39           [ 5 ] 	LDX	ROIBAK		GET RETURN ADDRESS
1189 f7a9 6e 00              [ 4 ] 	JMP	0,X		AND RETURN FROM ROI
1190 f7ab 7e f2 ca           [ 3 ] NOTROI	JMP	REGBEG		*** TO REG DISPLAY ***
1191                               *
1192                               *
1193 f7ae b6 e4 86           [ 4 ] ENNMI	LDAA	PIAPB		TO CLEAR FLAGS LDAA	#$07		ENABLE KEY INTERRUPT FLAGS
1194 f7b1 b7 e4 87           [ 5 ] 	STAA	PIACRB		TO PIA CONTROL REGISTER
1195 f7b4 86 ff              [ 2 ] 	LDAA	#$FF	
1196 f7b6 b7 e4 86           [ 5 ] 	STAA	PIAPB		ENABLE ALL KEY ROWS
1197 f7b9 39                 [ 5 ] 	RTS			** RETURN ** 		
1198                               *
1199                               *
1200 f7ba be e4 2f           [ 5 ] SVSTAT	LDS	USP		POINT AT STACKED STATUS
1201 f7bd ce e4 31           [ 3 ] 	LDX	#UCC		POINT AT PSEUDO REG AREA
1202 f7c0 32                 [ 4 ] SVLOOP	PULA			GET STACKED BYTE
1203 f7c1 a7 00              [ 6 ] 	STAA	,X		STORE AT PSEUDO REG RAM LOC
1204 f7c3 08                 [ 4 ] 	INX			POINT AT NEXT REG LOC
1205 f7c4 8c e4 38           [ 3 ] 	CPX	#UPC+2		PAST END ?
1206 f7c7 26 f7              [ 4 ] 	BNE	SVLOOP		IF NOT CONTINUE LOOP
1207 f7c9 bf e4 2f           [ 6 ] 	STS	USP		SAVE USER SP AT AT INTERRUPT TIME
1208 f7cc 8e e4 7c           [ 3 ] 	LDS	#STKTOP-2	SET FOR RETURN
1209 f7cf 39                 [ 5 ] 	RTS			** RETURN **
1210                               *
1211                               *
1212 f7d0 01                 [ 2 ] SWINT	NOP			SET IRQ FLAG
1213 f7d1 0f                 [ 2 ] 	SEI			.
1214 f7d2 bf e4 2f           [ 6 ] 	STS	USP		POINTER TO USER'S REGS
1215 f7d5 8e e4 7e           [ 3 ] 	LDS	#STKTOP		INIT TO SYST AREA
1216 f7d8 8d e0              [ 8 ] 	BSR	SVSTAT		RECOVER BREAK STATUS
1217 f7da fe e4 36           [ 5 ] 	LDX	UPC		BACK PROG CNTR
1218 f7dd 09                 [ 4 ] 	DEX			.
1219 f7de ff e4 36           [ 6 ] 	STX	UPC		.
1220 f7e1 bd f4 85           [ 9 ] 	JSR	OUTBKS		TAKE OUT BREAKPOINTS
1221 f7e4 7f e4 3b           [ 6 ] 	CLR	UPROG		SIGNAL NOT IN-USER PROG
1222 f7e7 7e f2 ca           [ 3 ] 	JMP	REGBEG		*** TO REG DISPLAY ***
1223                               *
1224                               *
1225 f7ea fe e4 3c           [ 5 ] UIRQ	LDX	UIRQV		GET USER IRQ VECTOR
1226 f7ed 6e 00              [ 4 ] 	JMP	0,X		*** GO TO USER SERVICE ROUTINE ***
1227                               *
1228                               ******************************************
1229                               *
1230 e419                          	ORG	$E419
1231                               *
1232                               * DEFS - DEFINITIONS AND SCRATCH LOCATIONS
1233                               *
1234                               ******************************************
1235 e419                          MNPTR	RMB	2		POINTER TO ACTIVE SUBROUTINE
1236 e41b                          KEY	RMB	1		KEY DATA
1237 e41c                          KYFLG	RMB	1		KEY PENDING FLAG
1238 e41d                          DISBUF	RMB	6		DISPLAY BUFFER
1239 e423                          ROLPAS	RMB	1		FIRST PASS OF DATA ROL-ENT
1240 e424                          XSAVD	RMB	2		X SCRATCH
1241 e426                          XSAV1	RMB	2		.
1242 e428                          XTMP1	RMB	2		.
1243 e42a                          MEMSAV	RMB	2		SAVE MEM POINTER DURING OFFSET CALL
1244 e42c                          HEXBUF	RMB	3		HEX INPUT BUFFER
1245 e42f                          USP	RMB	2		USER STACK POINTER
1246 e431                          UCC	RMB	1		USER CONDITION CODE
1247 e432                          UB	RMB	1		USER B REGISTER
1248 e433                          UA	RMB	1		USER A REGISTER
1249 e434                          UX	RMB	2		USER x REGISTER
1250 e436                          UPC	RMB	2		USER PROGRAM COUNTER
1251 e438                          ROIFLG	RMB	1		RUN-ONE-INSTRUCTION FLAG
1252 e439                          ROIBAK	RMB	2		ADDRESS TO RETURN AFTER ROI
1253 e43b                          UPROG	RMB	1		FLAG INDICATE IN-USER-PROG
1254 e43c                          UIRQV	RMB	2		ADDR OF USER'S IRQ SERVICE ROUTINE
1255 e43e                          FNCFL	RMB	1		SPECIAL FUNCTION FLAG
1256 e43f                          FNCPNT	RMB	2		POINT TO USER'S SPECIAL FUNCTION
1257 e441                          REGNO	RMB	1		REGISTER NUMBER (USED IN REGDIS)
1258 e442                          BKPNTR	RMB	2		POINTS TO BREAKPOINT TABLE
1259 e444                          BRKNO	RMB	1		# OF BREAKPOINTS IN TABLE
1260 e445                          BRKTAB	RMB	20		BREAKPOINT TABLE
1261 e459                          BRKEND	EQU	*		END OF TABLE 
1262                               *
1263                               * CASSETTE INTERFACE SCRATCH LOCATION
1264                               *
1265 e459                          BYTE	RMB	1		DATA BUFFER
1266 e45a                          CYCNT	RMB	2		CYCLE COUNT REG
1267 e45c                          GOOD1S	RMB	1		# NUMBER OF GOOD 1'S
1268 e45d                          OLD	RMB	1
1269 e45e                          CHKSM	RMB	1		CHECKSUM REG
1270 e45f                          NBITS	RMB	1		
1271 e460                          BEGAD	RMB	2		BEGGINING ADDRESS
1272 e462                          ENDAD	RMB	2		END ADDRESS
1273                               *
1274 e484                          PIA	EQU	$E484		SYSTEM PIA BASE ADDRESS
1275 0000                          KPCOL	EQU	$0		KEYPAD COL PORT OFFSET
1276 0002                          KPROW	EQU	$2		KEYPAD ROW PORT	OFFSET
1277 e484                          ANOD	EQU	$E484		DISPLAY SEG ANODES
1278 e486                          CATH	EQU	$E486		DISPLAY CATHODES
1279 e486                          PIAROW	EQU	$E486		EXTENDED MODE ROW PORT ADDR
1280 e486                          PIADPB	EQU	$E486		PIA DATA PORT B
1281 e485                          PIACR	EQU	$E485		PIA CONTROL REG A
1282 e484                          PIADP	EQU	$E484		PIA DATA PORT A
1283 e485                          PIACRA	EQU	$E485		PIA CONTROL REG A
1284 e487                          PIACRB	EQU	$E487		PIA CONTROL REG B
1285 e486                          PIAPB	EQU	$E486		PIA DATA PORT B
1286 e47e                          STKTOP	EQU	$E47E		TOP OF SYSTEM STACK
1287                               *
1288                               * SYSTEM VECTORS
1289                               *
1290                               * ON MEK6802D5 EITHER UPPER HALF
1291                               * OF D5BUG ($F400-F7FF) MUST "MIRROR"
1292                               * INTO ADDRESSES ($FC00-FFFF) OR
1293                               * ELSE USER MUST SUPPLY PROM
1294                               * MAPPED IN ($FC00-FFFF) AREA WHICH 
1295                               * CONTAINS ALTERNATE VECTORS.
1296                               * IN THE CASE OF "MIRRORING" THE
1297                               * FOLLOWING VECTORS WOULD ALSO 
1298                               * APPEAR AT THE NORMAL 6802
1299                               * VECTOR LOCATIONS ($FFF8-FFFF)
1300 f7f8                          	ORG	$F7F8
1301 f7f8 f7 ea                    	FDB	UIRQ		USER IRQ VECTOR
1302 f7fa f7 d0                    	FDB	SWINT		SOFTWARE INTERRUPT VECTOR
1303 f7fc f7 73                    	FDB	NMINT		NON MASKABLE INTERRUPT VECTOR
1304 f7fe f0 00                    	FDB	RESET		RESTART VECTOR
1305                               	END
1306                               ******************************************
ABORT      f789 *1177 1173 
ABSOUT     f76d *1154 1146 
ADDAX      f183 *0280 0096 0193 0234 0509 
ADLOOP     f651 *1001 1012 
ALTBAD     f735 *1132 1096 
ANOD       e484 *1277 0153 0157 
ARNCL2     f1bc *0308 0304 
ARNCL4     f1dd *0326 0321 
ARNCLR     f1a0 *0295 0293 
ARND       f191 *0285 0283 
ARNINC     f243 *0382 0380 
ARNR1      f30a *0486 0484 
ARNR2      f31c *0496 0494 
ARNR3      f365 *0531 0527 
ASNOW      f4f2 *0784 0781 
BACK       f3e3 *0605 0591 
BAD        f6d8 *1086 1073 1083 
BADCAL     f281 *0413 0402 
BADOFF     f257 *0392 0383 
BADSTK     f729 *1128 1118 
BEGAD      e460 *1271 0793 1000 1011 1018 1056 1061 1066 
BEGEND     f4ec *0780 0775 
BIT0       f5e4 *0925 0958 0968 
BIT1       f5d1 *0909 0970 
BITOVR     f5b4 *0888 0879 
BKFMTB     f42e *0648 0583 
BKLOOP     f3cb *0593 0601 
BKLOP      f444 *0661 0671 
BKNO       f43e *0659 0617 
BKPNTR     e442 *1258 0592 0602 0631 0650 0665 0686 0691 0710 0713 
                      0745 
BKTOTB     f3f1 *0615 0580 
BRKBEG     f388 *0562 0204 
BRKEDT     f38e *0565 0563 
BRKEND     e459 *1261 0597 0670 0698 0719 0736 
BRKLOP     f4a9 *0730 0737 
BRKNO      e444 *1259 0589 0606 0618 0637 0653 0659 0663 0680 
BRKPNT     f39c *0570 0565 
BRKTAB     e445 *1260 0599 0660 0682 0706 0729 
BRKTST     f3a2 *0573 0571 
BYTE       e459 *1265 0827 0889 0898 0901 0957 0966 
CALDUN     f26b *0401 0361 
CATH       e486 *1278 0154 0158 
CHKCHK     f6cf *1081 1075 
CHKOVR     f5a6 *0878 0875 
CHKSM      e45e *1269 0899 0900 0999 1003 1004 1021 1022 1023 1036 
                      1037 1057 1082 
CKBKPT     f467 *0683 0699 
CKFC       f3b5 *0581 0579 
CKGO       f3bc *0584 0582 
CKLSB      f4b8 *0740 0731 
CLOP       f088 *0092 0093 
CLRDS      f195 *0290 0050 0186 0387 0396 0433 0609 
CLRLOP     f005 *0021 0024 
CLRLP      f19b *0292 0297 
COLFND     f063 *0071 0067 
CONOUT     f509 *0794 0778 
CONTIN     f6fe *1106 1103 
CYCNT      e45a *1266 0828 0829 0854 0855 0870 0871 0872 0874 
DIDDLE     f0a2 *0102 1135 
DISBRK     f3c0 *0589 0569 0649 0654 
DISBUF     e41d *1238 0048 0146 0229 0291 0296 0367 0524 0526 0528 
                      0529 0755 1093 1095 1129 1131 1133 
DISDUN     f3f0 *0610 0585 0607 
DLOOP      f66e *1019 1032 
DLY1       f171 *0269 0155 
DLY25      f169 *0266 0094 
DLYLP      f17c *0273 0268 0271 0274 
DLYX       f179 *0272 
DO1        f625 *0970 0967 
DOPCH      f515 *0799 0791 
DUNDAT     f68d *1036 1030 
DUNROW     f080 *0087 0084 
DYSCOD     f120 *0213 0184 0365 0385 0394 0449 0522 0577 0605 0640 
                      0797 
DYSOUT     f512 *0797 0787 
DYSTBL     f159 *0247 0232 
ENDAD      e462 *1272 0800 1029 1074 
ENDBIT     f62a *0972 0969 0971 
ENNMI      f7ae *1193 0053 1174 1183 
FCLR       f4d1 *0762 0202 
FEDGE      f521 *0810 0831 0835 0839 
FNCFL      e43e *1255 0046 0181 0349 0359 0389 0398 0416 0435 0457 
                      0459 0562 0754 0770 1068 1088 
FNCPNT     e43f *1256 0188 
FNDBRK     f4a0 *0727 0615 0648 
FOUT       f4ca *0754 0764 
FSET       f4c5 *0752 0201 
FULL       f428 *0641 0616 0620 0627 
FUNK       f4fc *0789 0785 
FUNKY      f105 *0191 0180 
FUNSEL     f0e5 *0175 0051 
GET        f04e *0061 0070 0081 1171 
GO         f6f3 *1102 0200 
GO1        f70b *1112 1106 
GOEXIT     f747 *1139 1127 
GOOD1S     e45c *1267 0830 0856 0866 0868 0888 
GOTO       f70e *1113 1110 
HASH       f108 *0192 0189 
HEXBUF     e42c *1244 0216 0227 0302 0323 0324 0332 0333 0350 0358 
                      0372 0374 0375 0376 0384 0393 0408 0447 0448 0518 0520 
                      0531 0533 0590 0604 0622 0633 0634 0639 0727 0728 0790 
                      0792 0794 0795 0796 0799 1104 
INBKS      f45f *0680 1112 
INVRT      f5ff *0946 0910 0917 0926 0933 
ISBKPT     f450 *0666 0664 
KEY        e41b *1236 0072 0075 0087 0089 0098 0340 
KEYNOW     f0eb *0179 0176 
KPCOL      0000 *1275 0063 0066 0077 0092 
KPROW      0002 *1276 0065 0076 
KYFLG      e41c *1237 0045 0100 0175 0339 0353 0471 0570 0780 
KYTBL      f0a3 *0114 0095 
LDTAP      f4dc *0772 0460 
LLOOP      f633 *0983 0989 
LOAD       f69c *1050 0772 1052 
LOOP1      f578 *0858 0860 
LOOPB0     f5e6 *0926 0932 
LOOPB1     f5d3 *0910 0916 
LOOPF      f527 *0813 0815 
LOOPS      f552 *0838 0843 
LOPAD      f6a9 *1058 1062 
LOPBOT     f6c7 *1074 1071 
LOPDAT     f6b7 *1067 1077 
LP01       f128 *0217 0228 
LP02       f13e *0231 0240 
LP1P       f0bd *0146 0167 
LP2P       f0c1 *0148 0150 
LPCOL      f057 *0065 0069 
LPFND      f07a *0083 0086 
LPIN       f576 *0857 0884 
LPMID      f56d *0854 0853 0894 
LPOUT      f569 *0852 0892 
LPPOUT     f615 *0962 0973 
LPROW      f06a *0074 0080 
MEMBAK     f288 *0416 0405 0411 
MEMBEG     f1f6 *0347 0197 
MEMCH      f205 *0353 0347 
MEMNOW     f20b *0357 0354 
MEMOUT     f2bf *0446 0431 0441 
MEMSAV     e42a *1243 0377 0378 0403 0415 0437 
MNPTR      e419 *1235 0052 0160 0348 0462 0566 0776 1136 
NBITS      e45f *1270 0960 0972 
NEWMEM     f2ba *0443 0351 0417 0424 0429 
NEWREG     f31f *0497 0487 
NEXT       f4ad *0732 0741 0743 
NEXT1      f44d *0665 0662 
NEXT2      f47b *0694 0684 
NEXT3      f496 *0715 0708 
NMINT      f773 *1164 1303 
NOBPT      f484 *0700 0681 
NORMAL     f28d *0419 0360 
NOTEND     f3d7 *0600 0598 
NOTHEX     f3af *0578 0575 
NOTNEW     f350 *0522 0516 
NOTOVR     f5aa *0880 0877 
NOTROI     f7ab *1190 1186 
NOTSH      f546 *0833 0837 
NOTVRF     f2d5 *0461 0458 
NUM        f2b5 *0440 0420 
NXM1       f297 *0426 0422 
NXM2       f29e *0430 0427 
NXR1       f30f *0489 0481 
OFFEND     f221 *0366 0438 
OFFOUT     f21e *0365 
OFFRET     f227 *0368 0371 0407 0414 
OFFUN      f228 *0370 0363 
OLD        e45d *1268 0834 0838 0841 
ONLY1      f36a *0533 0530 
OUTBKS     f485 *0706 1220 
PCH        f4e2 *0775 0771 
PIA        e484 *1274 0061 
PIACR      e485 *1281 0814 0817 0859 
PIACRA     e485 *1283 1148 1153 
PIACRB     e487 *1284 1151 1167 1168 1194 
PIADP      e484 *1282 0811 0849 0861 
PIADPB     e486 *1280 0947 0948 
PIAPB      e486 *1285 1149 1193 1196 
PIAROW     e486 *1279 0101 
PNCHB      f608 *0957 0987 0997 1009 1027 1041 
PROMPT     f024 *0040 0198 0773 0802 1179 
PUNCH      f630 *0982 0801 
PUT        f0bb *0145 0054 0168 0463 1137 
R2OUT      f1c4 *0312 0307 
R4OUT      f1ed *0336 0325 
RDKEY      f1ef *0339 0179 0357 0475 0573 0784 
REGBEG     f2ca *0457 0199 0502 1190 1222 
REGDIS     f2ee *0471 0461 
REGFNC     f2fe *0480 0476 
REGNO      e441 *1257 0466 0482 0486 0491 0496 0505 
REGNOW     f2f4 *0475 0472 
REGOUT     f32e *0505 0469 0478 0501 
REGTBL     f370 *0538 0508 
REMOV1     f488 *0707 0720 
RESET      f000 *0018 1304 
RO4LP      f1e3 *0331 0335 
ROI        f701 *1107 0503 
ROIBAK     e439 *1252 1107 1188 
ROIFLG     e438 *1251 0044 1109 1145 1185 1187 
ROLL2      f1aa *0301 0440 
ROLL4      f1cc *0319 0183 0364 0477 0576 0786 
ROLPAS     e423 *1239 0042 0303 0305 0320 0322 0436 0444 0468 0498 
                      0515 0568 0642 0673 1102 
ROWFND     f079 *0082 0078 
RUNONE     f324 *0500 0490 
SAVE       f791 *1180 1169 1178 
SHRT       f58e *0868 0865 
STKTOP     e47e *1286 0040 0464 0465 1134 1181 1208 1215 
STOP       f6e4 *1092 1089 
SVLOOP     f7c0 *1202 1206 
SVSTAT     f7ba *1200 1182 1216 
SWINT      f7d0 *1212 1302 
SYNCIN     f579 *0859 0851 
SYSFNC     f110 *0197 0191 
TAPBEG     f4d7 *0770 0203 
TIN        f533 *0826 1050 1058 1067 1081 
TINDUN     f5c4 *0898 0890 
UA         e433 *1248 0541 1087 1141 
UB         e432 *1247 0544 1140 
UCC        e431 *1246 0553 1154 1201 
UFNK       f100 *0188 0182 
UIRQ       f7ea *1225 1301 
UIRQV      e43c *1254 1225 
UPC        e436 *1250 0538 1105 1119 1121 1205 1217 1219 
UPROG      e43b *1253 0043 1144 1177 1184 1221 
USP        e42f *1245 0034 0550 1113 1180 1200 1207 1214 
UX         e434 *1249 0547 1086 1139 
VERF       f6c3 *1072 1069 
WITHIN     f593 *0870 0867 0869 
XSAV1      e426 *1241 0215 0241 0290 0298 0301 0314 
XSAVD      e424 *1240 0266 0269 0272 0275 0280 0281 0282 0284 0285 
XTMP1      e428 *1242 0231 0236 
